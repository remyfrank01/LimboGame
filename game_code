from cmu_112_graphics import *
from tkinter import *
import random
import json
import requests
import pygame

#This program makes use of code from the 15-112 webiste to be able to run the animations.
#Source: https://www.cs.cmu.edu/~112/notes/notes-animations-part1.html




#This class creates a graphical user interface to allow the player(s) to enter a team name
#and then checks that team name with existing team names stored in a jstor file online.
#The use of GUI and some of this code is inspired by: https://www.youtube.com/watch?v=RTM9tiV_HoY
#(mainly for syntax purposes since I don't know the syntax for making a GUI in Python)


#If there is an appearance of a 'magic number' it is based off of the boundaries of the image used for a certain model.
#There was a significant amount of different images used to build this game, so it was impractical to create variables
#for the dimensions of every differing image.

class LoginInfo(object):
    teamName = ''
    proceed = True
    
    def __init__(self):
        self.login = Tk()
        self.login.geometry('700x500')

        self.teamName = ''

        self.canvas = Canvas(self.login, bg = 'black', width = 700, height = 500)
        self.canvas.pack(fill = 'both', expand = True)

        self.label = Label(self.canvas, text = 'Enter Team Name:', font = 'System', fg = 'black')
        self.label.pack(side = LEFT, expand = True)

        self.nameEntry = Entry(self.canvas, bd = 6, font = 'System')
        self.nameEntry.pack(side = RIGHT, expand = True)

        self.enter = Button(self.canvas, text = 'Enter', command = self.quit)
        self.enter.pack(side = RIGHT)

        self.login.protocol("WM_DELETE_WINDOW", self.exitFrame)

        self.login.mainloop()

    def quit(self):
        listOfChars = []
        LoginInfo.teamName = self.nameEntry.get()
        for i in range(len(LoginInfo.teamName)):
            listOfChars += LoginInfo.teamName[i]
        if(len(listOfChars) <= 1 or len(listOfChars) >= 9):
            self.noName = Label(self.canvas, text = 'Not a valid name', font = 'System', fg = 'red')
            self.noName.pack(side = BOTTOM)
        elif(type(LoginInfo.teamName) == str):
            Team(LoginInfo.teamName)
            self.login.destroy()
        else:
            self.errorLabel = Label(self.canvas, text = 'Not a valid entry', font = 'System', fg = 'red')
            self.errorLabel.pack(side = BOTTOM)
    
    def exitFrame(self):
        LoginInfo.proceed = False
        self.login.destroy()

class Team(object):
    teamNames = ''

    def __init__(self, teamName):
        self.teamName = teamName
        Team.teamNames = self.teamName

class Player(object):
    teamName = ''
    players = []
    hp = 100
    speed = 11
    lives = 3
    cyChangeRate = 10

    def __init__(self, cx, cy, color):
        self.cx = cx
        self.cy = cy
        self.color = color
        Player.players += [(self.cx, self.cy, self.color)]

class Enemy(object):
    enemies = []
    speed = 5
    cyChangeRate = 10
    jumpCount = 0

    def __init__(self, cx, cy, enemyWalkCount = 0, facingRight = True, hp = 16):
        self.cx = cx
        self.cy = cy
        self.enemyWalkCount = enemyWalkCount
        self.isFacingRight = facingRight
        self.hp = hp
        Enemy.enemies += [[self.cx, self.cy, self.enemyWalkCount, self.isFacingRight, self.hp, Enemy.jumpCount]]


class Wall(object):
    wallList = []
    def __init__(self, cx, cy, width, height):
        self.cx = cx
        self.cy = cy
        self.width = width
        self.height = height
        Wall.wallList += [(cx, cy, self.width, self.height)]

class Bullet(object):
    bullets = []
    cyChangeRate = .3

    def __init__(self, cx, cy, color, speed):
        self.cx = cx
        self.cy = cy
        self.color = color
        self.speed = speed
        Bullet.bullets += [[self.cx, self.cy, self.color, self.speed]]

class Bird(object):
    def __init__(self, cx, cy, changeX):
        self.cx = cx
        self.cy = random.randrange(50, 200)
        self.changeX = changeX

class Score(object):
    score = 0

class dataCollection(object):
    jumpDistances = []
    #This value for average is an estimated assumption of the distance a player will jump from the enemy
    #It is highly innacurate at first so the enemy will get progressively harder the more the game is played
    average = 200

    def __init__(self, jumpDistance):
        self.jumpDistance = jumpDistance
        dataCollection.jumpDistances += [self.jumpDistance]
        self.total = sum(dataCollection.jumpDistances)
        dataCollection.average = self.total / len(dataCollection.jumpDistances)

class TutorialMode(Mode):
    def appStarted(mode):
        TitleScreenMode.scoresViewable = True
        mode.playerNum = len(Player.players)
        mode.enemiesNum = len(Enemy.enemies)

        mode.playersRemaining = 1
        if(mode.playerNum == 2):
            mode.playersRemaining = 2

        mode.oneIsFacingRight = True
        mode.twoIsFacingRight = True

        mode.oneIsDead = False
        if(mode.playerNum == 2):
            mode.twoIsDead = False

        #Enemies
        mode.enemies = []
        mode.streak = 0
        mode.onStreak = False
        mode.enemiesKilled = 0
        mode.score = 0

        #Player 1
        mode.playerOneCx = Player.players[0][0]
        mode.playerOneCy = Player.players[0][1]
        mode.playerOneHp = Player.hp
        mode.playerOneVel = Player.speed
        mode.playerOneLives = Player.lives
        mode.playerOneDy = Player.cyChangeRate
        mode.playerOneJumpCount = 0
        mode.oneIsJumping = False

        #Player 2
        if(mode.playerNum > 1):
            mode.playerTwoCx = Player.players[1][0]
            mode.playerTwoCy = Player.players[1][1]
            mode.playerTwoHp = Player.hp
            mode.playerTwoVel = Player.speed
            mode.playerTwoLives = Player.lives
            mode.playerTwoDy = Player.cyChangeRate
            mode.playerTwoJumpCount = 0
            mode.twoIsJumping = False

        mode.tutorialComplete = False
        mode.isGameOver = False
        mode.isPaused = False
        mode.scrollY = 0
        mode.scrollX = 0
        mode.walls = []
        mode.walkCountOne = 0
        mode.walkCountTwo = 0
        mode.rightKeyIsPressed = False
        mode.dKeyIsPressed = False
        mode.leftKeyIsPressed = False
        mode.aKeyIsPressed = False

        #Standing Animations(left and right)
        mode.stationaryAnimationRight = [mode.scaleImage(mode.loadImage('Stationary.png'), .3),
            mode.scaleImage(mode.loadImage('walk1.png'), .3)]
        mode.stationaryAnimationLeft = [mode.scaleImage(mode.loadImage('StationaryLeft.png'), .3),
            mode.scaleImage(mode.loadImage('walkLeft1.png'), .3)]

        #Right facing animations
        mode.walkingRightAnimation = [mode.scaleImage(mode.loadImage('walk2.png'), .3),
                mode.scaleImage(mode.loadImage('walk3.png'), .3),
                mode.scaleImage(mode.loadImage('walk4.png'), .3),
                mode.scaleImage(mode.loadImage('walk5.png'), .3),
                mode.scaleImage(mode.loadImage('walk6.png'), .3),
                mode.scaleImage(mode.loadImage('walk7.png'), .3),
                mode.scaleImage(mode.loadImage('walk8.png'), .3)]
        
        #Left facing animations
        mode.walkingLeftAnimation = [mode.scaleImage(mode.loadImage('walkLeft2.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft3.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft4.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft5.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft6.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft7.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft8.png'), .3)]
        
        #Dead Animation
        mode.deceasedPlayer = mode.scaleImage(mode.loadImage('deceasedPlayer.png'), .3)
        mode.halo = mode.scaleImage(mode.loadImage('halo.png'), .1)
        
        #Enemy stationary animation
        mode.enemyStationaryAnimationRight = mode.scaleImage(mode.loadImage('enemyStationaryRight.png'), .4)
        mode.enemyStationaryAnimationLeft = mode.scaleImage(mode.loadImage('enemyStationaryLeft.png'), .4)
        
        #Enemy right moving animations
        mode.enemyWalkingRightAnimation = [mode.scaleImage(mode.loadImage('enemyRight1.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight2.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight3.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight4.png'), .4)]
        
        #Enemy left moving animations
        mode.enemyWalkingLeftAnimation = [mode.scaleImage(mode.loadImage('enemyLeft1.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft2.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft3.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft4.png'), .4)]
        
        mode.currEnemyModel = mode.enemyStationaryAnimationRight
        
        mode.backgroundImage = mode.scaleImage(mode.loadImage('cityScape.png'), 2)
        
        mode.currPlayerOneModel = mode.stationaryAnimationRight[0]
        mode.createBird = False
        mode.birdFlying = [mode.scaleImage(mode.loadImage('BirdUp.png'), .3), 
            mode.scaleImage(mode.loadImage('BirdNull.png'), .3),
            mode.scaleImage(mode.loadImage('BirdDown.png'), .3)]
        mode.birds = []
        mode.birdPosition = 0

        mode.bulletRadius = 2
        mode.oneCanShoot = True
        mode.twoCanShoot = False
        mode.spaceClicks = 0
        mode.tabClicks = 0

        if(mode.playerNum == 1):
            mode.playerOneColor = Player.players[0][2]
        else:
            mode.playerOneColor = Player.players[0][2]
            mode.playerTwoColor = Player.players[1][2]
            mode.currPlayerTwoModel = mode.stationaryAnimationRight[0]
    
    def keyPressed(mode, event):
        if(event.key == "Up" and mode.playerOneJumpCount < 2 and mode.oneIsJumping == False and not mode.oneIsDead):
            mode.getDistanceFromEnemyOne()
            mode.playerOneCy -= 75
            mode.playerOneJumpCount += 1
            mode.oneIsJumping = True
        elif(event.key == 'w' and mode.playerNum == 2 and mode.playerTwoJumpCount < 2 and mode.twoIsJumping == False and not mode.twoIsDead):
            mode.getDistanceFromEnemyTwo()
            mode.playerTwoCy -= 75
            mode.playerTwoJumpCount += 1
            mode.twoIsJumping = True
        elif(event.key == "Right" and not mode.oneIsDead):
            mode.oneIsFacingRight = True
            mode.rightKeyIsPressed = True
            mode.currPlayerModelOne = mode.stationaryAnimationRight[1]
        elif(event.key == 'Left' and not mode.oneIsDead):
            mode.oneIsFacingRight = False
            mode.leftKeyIsPressed = True
            mode.rightKeyIsPressed = False
            mode.currPlayerModelOne = mode.stationaryAnimationLeft[1]
        elif(event.key == "p"):
            mode.isPaused = True
            mode.app.setActiveMode(mode.app.pauseMode)
        elif(event.key == 'd' and mode.playerNum == 2 and not mode.twoIsDead):
            mode.twoIsFacingRight = True
            mode.dKeyIsPressed = True
            mode.currPlayerModelTwo = mode.stationaryAnimationRight[1]
        elif(event.key == 'a' and mode.playerNum == 2 and not mode.twoIsDead):
            mode.twoIsFacingRight = False
            mode.aKeyIsPressed = True
            mode.dKeyIsPressed = False
            mode.currPlayerModelTwo = mode.stationaryAnimationLeft[1]
        
        #Shooting mechanism
        if(event.key == 'Space' and mode.oneCanShoot and not mode.oneIsDead):
            mode.spaceClicks += 1
            if(mode.spaceClicks % 2 == 0):
                if(mode.oneIsFacingRight):
                    Bullet(mode.playerOneCx, mode.playerOneCy-25, mode.playerOneColor, 12)
                else:
                    Bullet(mode.playerOneCx, mode.playerOneCy-25, mode.playerOneColor, -12)
                mode.oneCanShoot = False
        
        elif(event.key == 'Tab' and mode.playerNum == 2 and mode.twoCanShoot and not mode.twoIsDead):
            mode.tabClicks += 1
            if(mode.tabClicks % 2 == 0):
                if(mode.twoIsFacingRight):
                    Bullet(mode.playerTwoCx, mode.playerTwoCy-25, mode.playerTwoColor, 12)
                else:
                    Bullet(mode.playerTwoCx, mode.playerTwoCy-25, mode.playerTwoColor, -12)
                mode.twoCanShoot = False
        
        #Enemy Creation
        if(event.key == 'e' and mode.enemiesNum < 3):
            mode.enemiesNum += 1
            enemyCx = random.randrange(10, mode.width-10)
            Enemy(enemyCx, mode.height - 70)
    
    def keyReleased(mode, event):
        if(event.key == "Right"):
            mode.rightKeyIsPressed = False
            mode.currPlayerOneModel = mode.stationaryAnimationRight[0]
        elif(event.key == "Left"):
            mode.leftKeyIsPressed = False
            mode.currPlayerOneModel = mode.stationaryAnimationLeft[0]
        elif(event.key == 'Up'):
            mode.oneIsJumping = False

        if(event.key == 'd'):
            mode.dKeyIsPressed = False
            mode.currPlayerTwoModel = mode.stationaryAnimationRight[0]
        elif(event.key == 'a'):
            mode.aKeyIsPressed = False
            mode.currPlayerTwoModel = mode.stationaryAnimationLeft[0]
        elif(event.key == 'w'):
            mode.twoIsJumping = False
        
        if(event.key == 'Space'):
            mode.oneCanShoot = True
        if(event.key == 'Tab'):
            mode.twoCanShoot = True

    def mousePressed(mode, event):
        pass
    
    def timerFired(mode):
        if(mode.enemiesKilled >= 3):
            mode.tutorialComplete = True
        if(mode.isPaused):
            mode.isPaused = False
            return
        mode.createBird = False
        newBird = random.randrange(100)
        for bird in mode.birds:
            bird.cx -= bird.changeX
            if(bird.cx <= -25):
                mode.birds.remove(bird)
        if(newBird >= 98):
            mode.createBird = True
        
        for bullet in Bullet.bullets:
            bullet[0] += bullet[3]
            bullet[1] += Bullet.cyChangeRate
        
        #This determines enemies motion (Simple AI)
        for enemy in Enemy.enemies:
            if(enemy[4] <= 0):
                mode.enemiesNum -= 1
                mode.streak += 1
                mode.onStreak = True
                Enemy.enemies.remove(enemy)
                mode.score += (10 * mode.streak)
                mode.enemiesKilled += 1
            enemy[1] += Enemy.cyChangeRate
            enemyJumps = random.randrange(100)
            distFromOne = enemy[0] - mode.playerOneCx

            if(abs(distFromOne) < dataCollection.average+5 and abs(distFromOne) > dataCollection.average-5 and enemy[5] < 2):
                enemy[5] += 1
                enemy[1] -= 100

            distFromTwo = 0
            if(mode.playerNum > 1):
                distFromTwo = enemy[0] - mode.playerTwoCx
            if(abs(distFromTwo) < dataCollection.average+5 and abs(distFromTwo) > dataCollection.average-5 and enemy[5] < 2):
                enemy[5] += 1
                enemy[1] -= 100

            target = min(abs(distFromOne), abs(distFromTwo))
            if(mode.playerNum == 1):
                target = abs(distFromOne)
            
            if(mode.playerNum == 2):
                if(mode.oneIsDead):
                    target = abs(distFromTwo)
                elif(mode.twoIsDead):
                    target = abs(distFromOne)

            if(target == abs(distFromOne) and distFromOne < 0):
                enemy[3] = True
                enemy[0] += Enemy.speed
                enemy[2] += 1
            elif(target == abs(distFromOne) and distFromOne > 0):
                enemy[3] = False
                enemy[0] -= Enemy.speed
                enemy[2] += 1
            elif(target == abs(distFromOne) and distFromOne == 0):
                enemy[3] = True
                mode.currEnemyModel = mode.enemyStationaryAnimationRight
            
            if(mode.playerNum > 1):
                if(target == abs(distFromTwo) and distFromTwo < 0):
                    enemy[3] = True
                    enemy[0] += Enemy.speed
                    enemy[2] += 1
                elif(target == abs(distFromTwo) and distFromTwo > 0):
                    enemy[3] = False
                    enemy[0] -= Enemy.speed
                    enemy[2] += 1
                elif(target == abs(distFromOne) and distFromOne == 0):
                    enemy[3] = False
                    mode.currEnemyModel = mode.enemyStationaryAnimationLeft


        #Walking Right
        if(mode.rightKeyIsPressed):
            mode.playerOneCx += mode.playerOneVel
            mode.walkCountOne += 1
            if(mode.walkCountOne >= 7):
                mode.walkCountOne = 1
            mode.currPlayerOneModel = mode.walkingRightAnimation[mode.walkCountOne%7]
        if(mode.dKeyIsPressed):
            mode.playerTwoCx += mode.playerTwoVel
            mode.walkCountTwo += 1
            if(mode.walkCountTwo >= 7):
                mode.walkCountTwo = 1
            mode.currPlayerTwoModel = mode.walkingRightAnimation[mode.walkCountTwo%7]
        
        #Walking Left
        if(mode.leftKeyIsPressed):
            mode.playerOneCx -= mode.playerOneVel
            mode.walkCountOne += 1
            if(mode.walkCountOne >= 7):
                mode.walkCountOne = 1
            mode.currPlayerOneModel = mode.walkingLeftAnimation[mode.walkCountOne%7]
        if(mode.aKeyIsPressed):
            mode.playerTwoCx -= mode.playerTwoVel
            mode.walkCountTwo += 1
            if(mode.walkCountTwo >= 7):
                mode.walkCountTwo = 1
            mode.currPlayerTwoModel = mode.walkingLeftAnimation[mode.walkCountTwo%7]
        
        if(mode.tutorialComplete):
            TitleScreenMode.tutorialComplete = True
            mode.enemiesKilled = 0
            mode.playerOneHp = 100
            mode.oneIsDead = False
            mode.playerOneLives = 3
            mode.playerOneCx = 45
            mode.playerOneCy = mode.height - 100
            if(mode.playerNum == 2):
                mode.playerTwoLives = 3
                mode.playerTwoCx = 20
                mode.playerTwoCy = mode.height - 100
                mode.twoIsDead = False
                mode.playerTwoHp = 100
            Enemy.enemies = []
            Bullet.bullets = []
            mode.enemiesNum = 0
            mode.onStreak = False
            mode.streak = 0
            mode.tutorialComplete = False
            Score.score = mode.score
            mode.score = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.levelSelect)
            return
        if(mode.isGameOver):
            mode.playerOneHp = 100
            mode.oneIsDead = False
            mode.playerOneLives = 3
            mode.playerOneCx = 45
            mode.playerOneCy = 50
            if(mode.playerNum == 2):
                mode.playerTwoLives = 3
                mode.playerTwoCx = 20
                mode.twoIsDead = False
                mode.playerTwoHp = 100
                mode.playerTwoCy = 50
            Enemy.enemies = []
            Bullet.bullets = []
            mode.enemiesNum = 0
            mode.onStreak = False
            mode.streak = 0
            mode.isGameOver = False
            Score.score = mode.score
            mode.score = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.overMode)
            return
        if(mode.playerNum > 1):
            mode.playerTwoCy += mode.playerTwoDy
            mode.checkPlayerTwoBounds()

        if(mode.playerOneLives == 0):
            mode.oneIsDead = True
            mode.currPlayerOneModel = mode.deceasedPlayer
            mode.playerOneCy -= 20
            if(mode.playerNum == 2 and mode.twoIsDead):
                mode.isGameOver = True
            elif(mode.playerNum == 1):
                mode.isGameOver = True
        
        if(mode.playerNum == 2 and mode.playerTwoLives == 0):
            mode.twoIsDead = True
            mode.currPlayerTwoModel = mode.deceasedPlayer
            mode.playerTwoCy -= 20
            if(mode.oneIsDead):
                mode.isGameOver = True

        mode.playerOneCy += mode.playerOneDy
        mode.checkPlayerOneBounds()
        mode.checkBulletBounds()
        mode.checkEnemyBounds()
        mode.checkBulletHits()
        mode.checkEnemyAttack()

        mode.birdPosition += 1
    
    def checkBulletBounds(mode):
        for bullet in Bullet.bullets:
            if bullet[0] <= 0:
                Bullet.bullets.remove(bullet)
            elif bullet[0] >= mode.width:
                Bullet.bullets.remove(bullet)
            elif bullet[1] >= mode.height - 20:
                Bullet.bullets.remove(bullet)
    
    def checkPlayerOneBounds(mode):
        if(mode.playerOneCy + 50 >= mode.height):
            mode.playerOneCy = mode.height - 50
            mode.playerOneJumpCount = 0
            mode.oneIsJumping = False

        if(mode.playerOneCx - 20 <= 0):
            mode.playerOneCx = 20
        elif(mode.playerOneCx + 20 >= mode.width):
            mode.playerOneCx = mode.width - 20
    
    def checkPlayerTwoBounds(mode):
        if(mode.playerTwoCy + 50 >= mode.height):
            mode.playerTwoCy = mode.height - 50
            mode.playerTwoJumpCount = 0
            mode.twoIsJumping = False

        if(mode.playerTwoCx - 20 <= 0):
            mode.playerTwoCx = 20
        elif(mode.playerTwoCx + 20 >= mode.width):
            mode.playerTwoCx = mode.width - 20
    
    def checkEnemyBounds(mode):
        for enemy in Enemy.enemies:
            if(enemy[1] + 70 >= mode.height):
                enemy[5] = 0
                enemy[1] = mode.height - 70
    
    def getDistanceFromEnemyOne(mode):
        #The takeDataPoint value here determines whether or not we send the data to the dataCollection class.
        #This slows down the rate at which the enemy learns. Making it so the difficulty of the game progresses
        #as it is played more.

        takeDataPoint = random.randrange(100)
        if(takeDataPoint >= 95):
            for enemy in Enemy.enemies:
                if(mode.playerOneCx < enemy[0] and mode.oneIsFacingRight):
                    dataCollection(enemy[0] - mode.playerOneCx)
                elif(mode.playerOneCx > enemy[0] and mode.oneIsFacingRight == False):
                    dataCollection(mode.playerOneCx - enemy[0])

    def getDistanceFromEnemyTwo(mode):
        takeDataPoint = random.randrange(100)
        if(takeDataPoint >= 95):
            for enemy in Enemy.enemies:
                if(mode.playerTwoCx < enemy[0] and mode.twoIsFacingRight):
                    dataCollection(enemy[0] - mode.playerTwoCx)
                elif(mode.playerTwoCx > enemy [0] and mode.twoIsFacingRight == False):
                    dataCollection(mode.playerTwoCx - enemy[0])


    def checkBulletHits(mode):
        #bullet[0]=cx , bullet[1]=cy
        for enemy in Enemy.enemies:
            for bullet in Bullet.bullets:
                if(bullet[0] > enemy[0]-20 and bullet[0] < enemy[0] + 20 \
                    and bullet[1] < enemy[1] + 40 and bullet[1] > enemy[1] - 35):
                    enemy[4] -= 2
                    Bullet.bullets.remove(bullet)
    
    def checkEnemyAttack(mode):
        for enemy in Enemy.enemies:
            if(abs(enemy[0] - mode.playerOneCx) < 40 and enemy[1] + 10 < mode.playerOneCy):
                mode.playerOneHp -= 2
                if(mode.playerOneHp <= 0):
                    mode.playerOneLives -= 1
                    mode.playerOneHp = 100
                mode.onStreak = False
                mode.streak = 0
            
            if(mode.playerNum > 1):
                if(abs(enemy[0] - mode.playerTwoCx) < 40 and enemy[1] + 10 < mode.playerTwoCy):
                    mode.playerTwoHp -= 2
                    if(mode.playerTwoHp < 0):
                        mode.playerTwoLives -= 1
                        mode.playerTwoHp = 100
                    mode.onStreak = False
                    mode.streak = 0

    def drawWorld(mode, canvas):
        pass

    def drawBackground(mode, canvas):
        instructions = '''\t  Press [Right / d] to go right\n
                    Press [Left / a] to go left\n
                    Press [Up / w] to jump\n
                    Press [Space / Tab] to shoot enemy players\n
                    Press [e] to spawn an enemy'''
        canvas.create_image(mode.width//2, mode.height//2 + 32, image = ImageTk.PhotoImage(mode.backgroundImage))
        canvas.create_text(mode.width//2, mode.height//2 - mode.height//4, text = 'Tutorial Mode',\
            font = 'System 30 bold', fill = 'white')
        canvas.create_text(mode.width//2, mode.height//2, text = instructions,\
            font = 'System 15 bold', fill = 'white')

    def drawBirds(mode, canvas):
        if(mode.birdPosition > 2):
            mode.birdPosition = 0
        if(mode.createBird and len(mode.birds) < 5):
            mode.birds += [Bird(mode.width + 10, 50, random.randrange(3, 5))]
        for bird in  mode.birds:
            if(mode.birdPosition == 0):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))
            elif(mode.birdPosition == 1):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[1]))
            elif(mode.birdPosition == 2):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))
    
    def drawPlayers(mode, canvas):
        if (mode.playerNum == 1):
            canvas.create_image(mode.playerOneCx, mode.playerOneCy, image = ImageTk.PhotoImage(mode.currPlayerOneModel))
        elif (mode.playerNum == 2):
            canvas.create_image(mode.playerOneCx, mode.playerOneCy, image = ImageTk.PhotoImage(mode.currPlayerOneModel))
            canvas.create_image(mode.playerTwoCx, mode.playerTwoCy, image = ImageTk.PhotoImage(mode.currPlayerTwoModel))
    
    def drawPlayerIdentifiers(mode, canvas):
        if(mode.playerNum == 1 and not mode.oneIsDead):
            canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
        elif(mode.playerNum == 2):
            if(mode.oneIsDead):
                canvas.create_oval(mode.playerTwoCx - 5, mode.playerTwoCy - 60, mode.playerTwoCx + 5,\
                mode.playerTwoCy - 50, fill = mode.playerTwoColor, outline = 'white', width = 2)
            elif(mode.twoIsDead):
                canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                    mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
            else:
                canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                    mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
                canvas.create_oval(mode.playerTwoCx - 5, mode.playerTwoCy - 60, mode.playerTwoCx + 5,\
                    mode.playerTwoCy - 50, fill = mode.playerTwoColor, outline = 'white', width = 2)
    
    def drawEnemies(mode, canvas):
        for enemy in Enemy.enemies:
            if(enemy[3]):
                mode.currEnemyModel = mode.enemyWalkingRightAnimation[enemy[2] % 3]
            else:
                mode.currEnemyModel = mode.enemyWalkingLeftAnimation[enemy[2] % 3]
            canvas.create_image(enemy[0], enemy[1], image = ImageTk.PhotoImage(mode.currEnemyModel))

    #Draw Bullets
    def drawProjectiles(mode, canvas):
        for bullet in Bullet.bullets:
            canvas.create_oval(bullet[0] - mode.bulletRadius, bullet[1] - mode.bulletRadius,\
                bullet[0] + mode.bulletRadius, bullet[1] + mode.bulletRadius, fill = bullet[2],\
                    outline = 'black')
    
    def drawScore(mode, canvas):
        canvas.create_text(mode.width//2, 35, text = f'Score: {mode.score}', fill = 'white', font = 'System 20')
    
    def drawHp(mode, canvas):
        if(mode.oneIsDead == False):
            canvas.create_rectangle(20, 10, 120, 30, fill = None, outline = 'white')
            canvas.create_rectangle(20, 12, 20 + mode.playerOneHp, 28, fill = mode.playerOneColor)
        canvas.create_text(70, 50, text = f'Lives: {mode.playerOneLives}', font = 'System 10', fill = 'white')

        if(mode.playerNum == 2 and mode.twoIsDead == False):
            canvas.create_rectangle(mode.width - 120, 10, mode.width - 20, 30, fill = None, outline = 'white')
            canvas.create_rectangle(mode.width - (mode.playerTwoHp + 20) , 12, mode.width - 20, 28, fill = mode.playerTwoColor)
            canvas.create_text(mode.width - 70, 50, text = f'Lives: {mode.playerTwoLives}', font = 'System 10', fill = 'white')
    
    def drawDeath(mode, canvas):
        if(mode.oneIsDead):
            canvas.create_image(mode.playerOneCx - 50, mode.playerOneCy + 3, image = ImageTk.PhotoImage(mode.halo))
        elif(mode.playerNum == 2 and mode.twoIsDead):
            canvas.create_image(mode.playerTwoCx - 50, mode.playerTwoCy + 3, image = ImageTk.PhotoImage(mode.halo))

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        mode.drawBackground(canvas)
        canvas.create_rectangle(0, 475, mode.width, mode.height, fill = 'black')
        mode.drawScore(canvas)
        mode.drawHp(canvas)
        mode.drawBirds(canvas)
        mode.drawPlayers(canvas)
        mode.drawPlayerIdentifiers(canvas)
        mode.drawEnemies(canvas)
        mode.drawProjectiles(canvas)
        if(mode.oneIsDead or (mode.playerNum == 2 and mode.twoIsDead)):
            mode.drawDeath(canvas)


class GameMode(Mode):
    isPaused = False
    def appStarted(mode):
        mode.playerNum = len(Player.players)
        mode.enemiesNum = len(Enemy.enemies)
        mode.scrollX = 0

        mode.playersRemaining = 1
        if(mode.playerNum == 2):
            mode.playersRemaining = 2

        mode.oneIsFacingRight = True
        mode.twoIsFacingRight = True

        mode.oneIsDead = False
        if(mode.playerNum == 2):
            mode.twoIsDead = False

        #Enemies
        mode.enemies = []
        mode.streak = 0
        mode.onStreak = False
        mode.enemiesKilled = 0
        mode.score = 0

        #Player 1
        mode.playerOneCx = Player.players[0][0]
        mode.playerOneCy = Player.players[0][1]
        mode.playerOneHp = Player.hp
        mode.playerOneVel = Player.speed
        mode.playerOneLives = Player.lives
        mode.playerOneDy = Player.cyChangeRate
        mode.playerOneJumpCount = 0
        mode.oneIsJumping = False

        #Player 2
        if(mode.playerNum > 1):
            mode.playerTwoCx = Player.players[1][0]
            mode.playerTwoCy = Player.players[1][1]
            mode.playerTwoHp = Player.hp
            mode.playerTwoVel = Player.speed
            mode.playerTwoLives = Player.lives
            mode.playerTwoDy = Player.cyChangeRate
            mode.playerTwoJumpCount = 0
            mode.twoIsJumping = False

        mode.gameWon = False
        mode.isGameOver = False
        mode.isPaused = False
        mode.scrollY = 0
        mode.scrollX = 0
        mode.walls = []
        mode.walkCountOne = 0
        mode.walkCountTwo = 0
        mode.rightKeyIsPressed = False
        mode.dKeyIsPressed = False
        mode.leftKeyIsPressed = False
        mode.aKeyIsPressed = False

        #Standing Animations(left and right)
        mode.stationaryAnimationRight = [mode.scaleImage(mode.loadImage('Stationary.png'), .3),
            mode.scaleImage(mode.loadImage('walk1.png'), .3)]
        mode.stationaryAnimationLeft = [mode.scaleImage(mode.loadImage('StationaryLeft.png'), .3),
            mode.scaleImage(mode.loadImage('walkLeft1.png'), .3)]

        #Right facing animations
        mode.walkingRightAnimation = [mode.scaleImage(mode.loadImage('walk2.png'), .3),
                mode.scaleImage(mode.loadImage('walk3.png'), .3),
                mode.scaleImage(mode.loadImage('walk4.png'), .3),
                mode.scaleImage(mode.loadImage('walk5.png'), .3),
                mode.scaleImage(mode.loadImage('walk6.png'), .3),
                mode.scaleImage(mode.loadImage('walk7.png'), .3),
                mode.scaleImage(mode.loadImage('walk8.png'), .3)]
        
        #Left facing animations
        mode.walkingLeftAnimation = [mode.scaleImage(mode.loadImage('walkLeft2.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft3.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft4.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft5.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft6.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft7.png'), .3),
                mode.scaleImage(mode.loadImage('walkLeft8.png'), .3)]

        #Death animation
        mode.deceasedPlayer = mode.scaleImage(mode.loadImage('deceasedPlayer.png'), .3)
        mode.halo = mode.scaleImage(mode.loadImage('halo.png'), .1)
        
        #Enemy stationary animation
        mode.enemyStationaryAnimationRight = mode.scaleImage(mode.loadImage('enemyStationaryRight.png'), .4)
        mode.enemyStationaryAnimationLeft = mode.scaleImage(mode.loadImage('enemyStationaryLeft.png'), .4)
        
        #Enemy right moving animations
        mode.enemyWalkingRightAnimation = [mode.scaleImage(mode.loadImage('enemyRight1.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight2.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight3.png'), .4),
                mode.scaleImage(mode.loadImage('enemyRight4.png'), .4)]
        
        #Enemy left moving animations
        mode.enemyWalkingLeftAnimation = [mode.scaleImage(mode.loadImage('enemyLeft1.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft2.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft3.png'), .4),
                mode.scaleImage(mode.loadImage('enemyLeft4.png'), .4)]
        
        mode.currEnemyModel = mode.enemyStationaryAnimationRight
        
        mode.backgroundImage = mode.scaleImage(mode.loadImage('cityScape.png'), 2)
        
        mode.currPlayerOneModel = mode.stationaryAnimationRight[0]
        mode.createBird = False
        mode.birdFlying = [mode.scaleImage(mode.loadImage('BirdUp.png'), .3), 
            mode.scaleImage(mode.loadImage('BirdNull.png'), .3),
            mode.scaleImage(mode.loadImage('BirdDown.png'), .3)]
        mode.birds = []
        mode.birdPosition = 0

        mode.bulletRadius = 2
        mode.oneCanShoot = True
        mode.twoCanShoot = False
        mode.spaceClicks = 0
        mode.tabClicks = 0

        if(mode.playerNum == 1):
            mode.playerOneColor = Player.players[0][2]
        else:
            mode.playerOneColor = Player.players[0][2]
            mode.playerTwoColor = Player.players[1][2]
            mode.currPlayerTwoModel = mode.stationaryAnimationRight[0]

        mode.backImg = mode.loadImage('TreeLine.png')

        for i in range(10, 45):
            spawnEnemy = random.randrange(10)
            if(spawnEnemy >= 7):
                mode.enemiesNum += 1
                enemyCx = 100*i
                Enemy(enemyCx, mode.height - 70)

        mode.leftBarrier = Wall(-100, mode.height//2, 100, mode.height//2)
        mode.rightBarrier = Wall(5100, mode.height//2, 100, mode.height//2)

        mode.endImageOne = mode.scaleImage(mode.loadImage('FriendOne.png'), .4)
        mode.endImage = mode.scaleImage(mode.loadImage('FriendTwo.png'), .4)
        mode.endPoint = mode.endImageOne
        mode.tree = mode.scaleImage(mode.loadImage('tree1.png'), .7)
        mode.bench = mode.scaleImage(mode.loadImage('bench.png'), .7)
        mode.benches = []
        for i in range(1, 4):
            mode.benches += [(i*1220, mode.height - 75)]
        mode.well = mode.loadImage('well.png')
        mode.wells = []
        for j in range(1, 6):
            mode.wells += [(j*860, mode.height - 100)]
        
        mode.oneOnWell = False
        mode.oneOnBench = False

    
    def keyPressed(mode, event):
        if(event.key == "Up" and mode.playerOneJumpCount < 2 and mode.oneIsJumping == False and not mode.oneIsDead):
            mode.getDistanceFromEnemyOne()
            mode.playerOneCy -= 75
            mode.playerOneJumpCount += 1
            mode.oneIsJumping = True
        elif(event.key == 'w' and mode.playerNum == 2 and mode.playerTwoJumpCount < 2 and mode.twoIsJumping == False and not mode.twoIsDead):
            mode.getDistanceFromEnemyTwo()
            mode.playerTwoCy -= 75
            mode.playerTwoJumpCount += 1
            mode.twoIsJumping = True
        elif(event.key == "Right" and not mode.oneIsDead):
            mode.scrollX += 5
            mode.oneIsFacingRight = True
            mode.rightKeyIsPressed = True
            mode.currPlayerModelOne = mode.stationaryAnimationRight[1]
        elif(event.key == 'Left' and not mode.oneIsDead):
            mode.scrollX -= 5
            mode.oneIsFacingRight = False
            mode.leftKeyIsPressed = True
            mode.rightKeyIsPressed = False
            mode.currPlayerModelOne = mode.stationaryAnimationLeft[1]
        elif(event.key == "p"):
            GameMode.isPaused = True
            mode.app.setActiveMode(mode.app.pauseMode)
        elif(event.key == 'd' and mode.playerNum == 2 and not mode.twoIsDead):
            mode.twoIsFacingRight = True
            mode.dKeyIsPressed = True
            mode.currPlayerModelTwo = mode.stationaryAnimationRight[1]
        elif(event.key == 'a' and mode.playerNum == 2 and not mode.twoIsDead):
            mode.twoIsFacingRight = False
            mode.aKeyIsPressed = True
            mode.dKeyIsPressed = False
            mode.currPlayerModelTwo = mode.stationaryAnimationLeft[1]
        
        #Shooting mechanism
        if(event.key == 'Space' and mode.oneCanShoot and not mode.oneIsDead):
            mode.spaceClicks += 1
            if(mode.spaceClicks % 2 == 0):
                if(mode.oneIsFacingRight):
                    Bullet(mode.playerOneCx, mode.playerOneCy-25, mode.playerOneColor, 12)
                else:
                    Bullet(mode.playerOneCx, mode.playerOneCy-25, mode.playerOneColor, -12)
                mode.oneCanShoot = False
        
        elif(event.key == 'Tab' and mode.playerNum == 2 and mode.twoCanShoot and not mode.twoIsDead):
            mode.tabClicks += 1
            if(mode.tabClicks % 2 == 0):
                if(mode.twoIsFacingRight):
                    Bullet(mode.playerTwoCx, mode.playerTwoCy-25, mode.playerTwoColor, 12)
                else:
                    Bullet(mode.playerTwoCx, mode.playerTwoCy-25, mode.playerTwoColor, -12)
                mode.twoCanShoot = False
        
        #Shortcut
        if(event.key == 'u'):
            mode.gameWon = True

    def keyReleased(mode, event):
        if(event.key == "Right"):
            mode.rightKeyIsPressed = False
            mode.currPlayerOneModel = mode.stationaryAnimationRight[0]
        elif(event.key == "Left"):
            mode.leftKeyIsPressed = False
            mode.currPlayerOneModel = mode.stationaryAnimationLeft[0]
        elif(event.key == 'Up'):
            mode.oneIsJumping = False

        if(event.key == 'd'):
            mode.dKeyIsPressed = False
            mode.currPlayerTwoModel = mode.stationaryAnimationRight[0]
        elif(event.key == 'a'):
            mode.aKeyIsPressed = False
            mode.currPlayerTwoModel = mode.stationaryAnimationLeft[0]
        elif(event.key == 'w'):
            mode.twoIsJumping = False
        
        if(event.key == 'Space'):
            mode.oneCanShoot = True
        if(event.key == 'Tab'):
            mode.twoCanShoot = True

    def timerFired(mode):
        if(mode.isPaused):
            mode.isPaused = False
            return
        mode.createBird = False
        newBird = random.randrange(100)
        for bird in mode.birds:
            bird.cx -= bird.changeX
            if(bird.cx <= -25):
                mode.birds.remove(bird)
        if(newBird >= 98):
            mode.createBird = True
        
        for bullet in Bullet.bullets:
            bullet[0] += bullet[3]
            bullet[1] += Bullet.cyChangeRate
        
        #This determines enemies motion (Simple AI)
        for enemy in Enemy.enemies:
            if(enemy[4] <= 0):
                mode.enemiesNum -= 1
                mode.streak += 1
                mode.onStreak = True
                Enemy.enemies.remove(enemy)
                mode.score += (10 * mode.streak)
                mode.enemiesKilled += 1
            enemy[1] += Enemy.cyChangeRate
            enemyJumps = random.randrange(100)
            distFromOne = enemy[0] - mode.playerOneCx

            if(abs(distFromOne) < dataCollection.average+5 and abs(distFromOne) > dataCollection.average-5 and enemy[5] < 2):
                enemy[5] += 1
                enemy[1] -= 100

            distFromTwo = 0
            if(mode.playerNum > 1):
                distFromTwo = enemy[0] - mode.playerTwoCx
            if(abs(distFromTwo) < dataCollection.average+5 and abs(distFromTwo) > dataCollection.average-5 and enemy[5] < 2):
                enemy[5] += 1
                enemy[1] -= 100

            target = min(abs(distFromOne), abs(distFromTwo))
            if(mode.playerNum == 1):
                target = abs(distFromOne)

            if(target == abs(distFromOne) and distFromOne < 0 and enemy[0] <= mode.width):
                enemy[3] = True
                enemy[0] += Enemy.speed
                enemy[2] += 1
            elif(target == abs(distFromOne) and distFromOne > 0 and enemy[0] <= mode.width):
                enemy[3] = False
                enemy[0] -= Enemy.speed
                enemy[2] += 1
            elif(target == abs(distFromOne) and distFromOne == 0):
                enemy[3] = True
                mode.currEnemyModel = mode.enemyStationaryAnimationRight
            
            if(mode.playerNum > 1):
                if(target == abs(distFromTwo) and distFromTwo < 0 and enemy[0] <= mode.width):
                    enemy[3] = True
                    enemy[0] += Enemy.speed
                    enemy[2] += 1
                elif(target == abs(distFromTwo) and distFromTwo > 0 and enemy[0] <= mode.width):
                    enemy[3] = False
                    enemy[0] -= Enemy.speed
                    enemy[2] += 1
                elif(target == abs(distFromOne) and distFromOne == 0):
                    enemy[3] = False
                    mode.currEnemyModel = mode.enemyStationaryAnimationLeft
            
            if(mode.rightKeyIsPressed or (mode.playerNum == 2 and mode.dKeyIsPressed)):
                for enemy in Enemy.enemies:
                    if(enemy[0] <= Wall.wallList[0][0] + Wall.wallList[0][2] - mode.scrollX + 10):
                        pass
                    else:
                        enemy[0] -= 1
            elif(mode.leftKeyIsPressed or (mode.playerNum == 2 and mode.aKeyIsPressed)):
                for enemy in Enemy.enemies:
                    if(enemy[0] >= Wall.wallList[1][0] - Wall.wallList[1][2] - mode.scrollX - 10):
                        pass
                    else:
                        enemy[0] += 1


        #Walking Right
        if(mode.rightKeyIsPressed):
            if(mode.playerOneCx >= mode.width - mode.width//4):
                if(mode.playerNum == 2 and mode.dKeyIsPressed == False):
                    mode.playerTwoCx -= 10
                mode.scrollX += 10
            else:
                mode.playerOneCx += mode.playerOneVel
            mode.walkCountOne += 1
            if(mode.walkCountOne >= 7):
                mode.walkCountOne = 1
            mode.currPlayerOneModel = mode.walkingRightAnimation[mode.walkCountOne%7]

        if(mode.dKeyIsPressed and mode.playerNum == 2):
            if(mode.playerTwoCx >= mode.width - mode.width//4):
                if(mode.rightKeyIsPressed == False):
                    mode.playerOneCx -= 10
                mode.scrollX += 10
            else:
                mode.playerTwoCx += mode.playerTwoVel
            mode.walkCountTwo += 1
            if(mode.walkCountTwo >= 7):
                mode.walkCountTwo = 1
            mode.currPlayerTwoModel = mode.walkingRightAnimation[mode.walkCountTwo%7]
        
        #Walking Left
        if(mode.leftKeyIsPressed):
            if(mode.playerOneCx <= mode.width//4):
                if(mode.playerNum == 2 and mode.aKeyIsPressed == False):
                    mode.playerTwoCx += 10
                mode.scrollX -= 10
            else:
                mode.scrollX -= 10
                mode.playerOneCx -= mode.playerOneVel
            mode.walkCountOne += 1
            if(mode.walkCountOne >= 7):
                mode.walkCountOne = 1
            mode.currPlayerOneModel = mode.walkingLeftAnimation[mode.walkCountOne%7]

        if(mode.aKeyIsPressed and mode.playerNum == 2):
            if(mode.playerTwoCx <= mode.width//4):
                if(mode.leftKeyIsPressed == False):
                    mode.playerOneCx += 10
            else:
                mode.playerTwoCx -= mode.playerTwoVel
                mode.scrollX -= 10
            mode.walkCountTwo += 1
            if(mode.walkCountTwo >= 7):
                mode.walkCountTwo = 1
            mode.currPlayerTwoModel = mode.walkingLeftAnimation[mode.walkCountTwo%7]
        
        if(mode.enemiesNum == 0):
            mode.endPoint = mode.endImage
        
        if(mode.enemiesNum == 0 and mode.playerOneCx >= 5000 - 250 - mode.scrollX - 10 and 
            mode.playerOneCx <= 5000 - 250 - mode.scrollX + 10):
            mode.gameWon = True
        
        if(mode.gameWon):
            mode.endPoint = mode.endImageOne
            mode.enemiesKilled = 0
            mode.playerOneHp = 100
            mode.oneIsDead = False
            mode.playerOneLives = 3
            mode.playerOneCx = 45
            mode.playerOneCy = mode.height - 100
            mode.scrollX = 0
            if(mode.playerNum == 2):
                mode.playerTwoLives = 3
                mode.playerTwoCx = 20
                mode.twoIsDead = False
                mode.playerTwoHp = 100
                mode.playerTwoCy = mode.height - 100
            Enemy.enemies = []
            mode.enemiesNum = 0
            for i in range(10, 45):
                spawnEnemy = random.randrange(10)
                if(spawnEnemy >= 7):
                    mode.enemiesNum += 1
                    enemyCx = 100*i
                    Enemy(enemyCx, mode.height - 70)
            mode.onStreak = False
            mode.streak = 0
            mode.gameWon = False
            mode.dictOfTeam = {Team.teamNames: mode.score}
            Score.score = mode.score
            mode.score = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.winningMode)
            return
        if(mode.isGameOver):
            mode.endPoint = mode.endImageOne
            mode.playerOneHp = 100
            mode.oneIsDead = False
            mode.playerOneLives = 3
            mode.playerOneCx = 45
            mode.playerOneCy = 50
            if(mode.playerNum == 2):
                mode.playerTwoLives = 3
                mode.playerTwoCx = 20
                mode.twoIsDead = False
                mode.playerTwoHp = 100
                mode.playerTwoCy = 50
            Enemy.enemies = []
            mode.enemiesNum = 0
            for i in range(10, 45):
                spawnEnemy = random.randrange(10)
                if(spawnEnemy >= 7):
                    mode.enemiesNum += 1
                    enemyCx = 100*i
                    Enemy(enemyCx, mode.height - 70)
            mode.onStreak = False
            mode.streak = 0
            mode.isGameOver = False
            Score.score = mode.score
            mode.score = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.overMode)
            return
        if(mode.playerNum > 1):
            mode.playerTwoCy += mode.playerTwoDy
            mode.checkPlayerTwoBounds()

        if(mode.playerOneLives == 0):
            mode.oneIsDead = True
            mode.currPlayerOneModel = mode.deceasedPlayer
            mode.playerOneCy -= 20
            if(mode.playerNum == 2 and mode.twoIsDead):
                mode.isGameOver = True
            elif(mode.playerNum == 1):
                mode.isGameOver = True
        
        if(mode.playerNum == 2 and mode.playerTwoLives == 0):
            mode.twoIsDead = True
            mode.currPlayerTwoModel = mode.deceasedPlayer
            mode.playerTwoCy -= 20
            if(mode.oneIsDead):
                mode.isGameOver = True

        
        mode.playerOneCy += mode.playerOneDy
        mode.checkPlayerOneBounds()
        mode.checkBulletBounds()
        mode.checkEnemyBounds()
        mode.checkBulletHits()
        mode.checkEnemyAttack()
        mode.checkWallHits()
        mode.checkWellAndBenchHit()

        mode.birdPosition += 1

    
    def checkWellAndBenchHit(mode):
        for well in mode.wells:
            if((mode.rightKeyIsPressed or (mode.playerNum == 2 and mode.dKeyIsPressed)) and 
                mode.playerOneCx + 10 >= well[0] - mode.scrollX - 45 and 
                mode.playerOneCx - 15 <= well[0] - mode.scrollX + 25 and 
                mode.playerOneCy + 20 > well[1] - 10):
                mode.playerOneCx = well[0] - mode.scrollX - 55
                mode.playerOneCx -= 10
            elif(mode.playerOneCx + 15 >= well[0] - mode.scrollX - 45 and mode.playerOneCx - 15 <= well[0] - mode.scrollX + 25 and
                mode.playerOneCy + 10 <= well[1] - 10):
                mode.playerOneCy = well[1] - 40
                mode.playerOneJumpCount = 0
            elif((mode.leftKeyIsPressed or (mode.playerNum == 2 and mode.aKeyIsPressed)) and 
                mode.playerOneCx - 10 <= well[0] - mode.scrollX + 25 and
                mode.playerOneCx >= well[0] - mode.scrollX - 45 and 
                mode.playerOneCy + 20 > well[1] - 10):
                mode.playerOneCx = well[0] - mode.scrollX + 35
                mode.playerOneCx += 10

            if(mode.playerNum == 2):
                if((mode.dKeyIsPressed or mode.rightKeyIsPressed) and mode.playerTwoCx + 10 >= well[0] - mode.scrollX - 45 and 
                    mode.playerTwoCx - 15 <= well[0] - mode.scrollX + 25 and mode.playerTwoCy + 20 > well[1] - 10):
                    mode.playerTwoCx = well[0] - mode.scrollX - 55
                    mode.playerTwoCx -= 10
                elif(mode.playerTwoCx + 15 >= well[0] - mode.scrollX - 45 and mode.playerTwoCx - 15 <= well[0] - mode.scrollX + 25 and
                    mode.playerTwoCy + 10 <= well[1] - 10):
                    mode.playerTwoCy = well[1] - 40
                    mode.playerTwoJumpCount = 0
                elif((mode.aKeyIsPressed or mode.leftKeyIsPressed) and mode.playerTwoCx - 10 <= well[0] - mode.scrollX + 25 and
                    mode.playerTwoCx >= well[0] - mode.scrollX - 45 and mode.playerTwoCy + 20 > well[1] - 10):
                    mode.playerTwoCx = well[0] - mode.scrollX + 35
                    mode.playerTwoCx += 10

        for bench in mode.benches:
            if((mode.rightKeyIsPressed or (mode.playerNum == 2 and mode.dKeyIsPressed)) and 
                mode.playerOneCx + 10 >= bench[0] - mode.scrollX - 65 and 
                mode.playerOneCx - 15 <= bench[0] - mode.scrollX + 50 and 
                mode.playerOneCy + 20 > bench[1] - 10):
                mode.playerOneCx = bench[0] - mode.scrollX - 75
                mode.playerOneCx -= 10
            elif(mode.playerOneCx + 15 >= bench[0] - mode.scrollX - 65 and mode.playerOneCx - 15 <= bench[0] - mode.scrollX + 50 and
                mode.playerOneCy + 10 <= bench[1] - 10):
                mode.playerOneCy = bench[1] - 40
                mode.playerOneJumpCount = 0
            elif(mode.leftKeyIsPressed and mode.playerOneCx - 10 <= bench[0] - mode.scrollX + 50 and
                mode.playerOneCx >= bench[0] - mode.scrollX - 65 and mode.playerOneCy + 20 > bench[1] - 10):
                mode.playerOneCx = bench[0] - mode.scrollX + 60
                mode.playerOneCx += 10

            if(mode.playerNum == 2):
                if(mode.dKeyIsPressed and mode.playerTwoCx + 10 >= bench[0] - mode.scrollX - 50 and 
                    mode.playerTwoCx - 15 <= bench[0] - mode.scrollX + 30 and mode.playerTwoCy + 20 > bench[1] - 10):
                    mode.playerTwoCx = bench[0] - mode.scrollX - 60
                    mode.playerTwoCx -= 10
                elif(mode.playerTwoCx + 15 >= bench[0] - mode.scrollX - 50 and mode.playerTwoCx - 15 <= bench[0] - mode.scrollX + 30 and
                    mode.playerTwoCy + 10 <= bench[1] - 10):
                    mode.playerTwoCy = bench[1] - 40
                    mode.playerTwoJumpCount = 0
                elif(mode.aKeyIsPressed and mode.playerTwoCx - 10 <= bench[0] - mode.scrollX + 50 and
                    mode.playerTwoCx >= bench[0] - mode.scrollX - 65 and mode.playerTwoCy + 20 > bench[1] - 10):
                    mode.playerTwoCx = bench[0] - mode.scrollX + 60
                    mode.playerTwoCx += 10

    def checkBulletBounds(mode):
        for bullet in Bullet.bullets:
            if bullet[0] <= 0:
                Bullet.bullets.remove(bullet)
            elif bullet[0] >= mode.width:
                Bullet.bullets.remove(bullet)
            elif bullet[1] >= mode.height - 20:
                Bullet.bullets.remove(bullet)
    
    def checkWallHits(mode):
        for (cx, cy, width, height) in Wall.wallList:
            if cx < mode.playerOneCx:
                if(mode.playerOneCx - 15 <= cx + width - mode.scrollX):
                    mode.playerOneCx = cx + width - mode.scrollX + 15
                    mode.leftKeyIsPressed = False
                if(mode.playerNum == 2 and mode.playerTwoCx - 15 <= cx + width - mode.scrollX):
                    mode.playerTwoCx = cx + width - mode.scrollX + 15
                    mode.aKeyIsPressed = False
            if cx > mode.playerOneCx:
                if(mode.playerOneCx + 10 >= cx - width - mode.scrollX):
                    mode.playerOneCx = cx - width - mode.scrollX - 10
                    mode.rightKeyIsPressed = False
                if(mode.playerNum == 2 and mode.playerTwoCx +10 >= cx - width - mode.scrollX):
                    mode.playerTwoCx = cx - width - mode.scrollX - 10
                    mode.dKeyIsPressed = False
                    

    def checkPlayerOneBounds(mode):
        if(mode.playerOneCy + 50 >= mode.height):
            mode.playerOneCy = mode.height - 50
            mode.playerOneJumpCount = 0
            mode.oneIsJumping = False

        if(mode.playerOneCx - 20 <= 0):
            mode.playerOneCx = 20
        elif(mode.playerOneCx + 20 >= mode.width):
            mode.playerOneCx = mode.width - 20

    def checkPlayerTwoBounds(mode):
        if(mode.playerTwoCy + 50 >= mode.height):
            mode.playerTwoCy = mode.height - 50
            mode.playerTwoJumpCount = 0
            mode.twoIsJumping = False

        if(mode.playerTwoCx - 20 <= 0):
            mode.playerTwoCx = 20
        elif(mode.playerTwoCx + 20 >= mode.width):
            mode.playerTwoCx = mode.width - 20

    def checkEnemyBounds(mode):
        for enemy in Enemy.enemies:
            if(enemy[1] + 70 >= mode.height):
                enemy[5] = 0
                enemy[1] = mode.height - 70

    def getDistanceFromEnemyOne(mode):
        takeDataPoint = random.randrange(100)
        if(takeDataPoint >= 95):
            for enemy in Enemy.enemies:
                if(mode.playerOneCx < enemy[0] and mode.oneIsFacingRight):
                    dataCollection(enemy[0] - mode.playerOneCx)
                elif(mode.playerOneCx > enemy[0] and mode.oneIsFacingRight == False):
                    dataCollection(mode.playerOneCx - enemy[0])

    def getDistanceFromEnemyTwo(mode):
        takeDataPoint = random.randrange(100)
        if(takeDataPoint >= 95):
            for enemy in Enemy.enemies:
                if(mode.playerTwoCx < enemy[0] and mode.twoIsFacingRight):
                    dataCollection(enemy[0] - mode.playerTwoCx)
                elif(mode.playerTwoCx > enemy [0] and mode.twoIsFacingRight == False):
                    dataCollection(mode.playerTwoCx - enemy[0])

    def checkBulletHits(mode):
        for enemy in Enemy.enemies:
            for bullet in Bullet.bullets:
                if(bullet[0] > enemy[0]-20 and bullet[0] < enemy[0] + 20 \
                    and bullet[1] < enemy[1] + 40 and bullet[1] > enemy[1] - 35):
                    enemy[4] -= 2
                    Bullet.bullets.remove(bullet)

    def checkEnemyAttack(mode):
        for enemy in Enemy.enemies:
            if(abs(enemy[0] - mode.playerOneCx) < 40 and enemy[1] + 10 < mode.playerOneCy):
                mode.playerOneHp -= 2
                if(mode.playerOneHp <= 0):
                    mode.playerOneLives -= 1
                    mode.playerOneHp = 100
                mode.onStreak = False
                mode.streak = 0
            
            if(mode.playerNum > 1):
                if(abs(enemy[0] - mode.playerTwoCx) < 40 and enemy[1] + 10 < mode.playerTwoCy):
                    mode.playerTwoHp -= 2
                    if(mode.playerTwoHp < 0):
                        mode.playerTwoLives -= 1
                        mode.playerTwoHp = 100
                    mode.onStreak = False
                    mode.streak = 0

    def drawBackground(mode, canvas):
        canvas.create_image(mode.width//2, mode.height - 160, image = ImageTk.PhotoImage(mode.backImg))

        for i in range(50):
            if(i%5 == 0 and i != 0):
                treeCx = i*100
                treeCy = mode.height - 95
                canvas.create_image(treeCx - mode.scrollX, treeCy, image = ImageTk.PhotoImage(mode.tree))
    
    def drawBirds(mode, canvas):
        if(mode.birdPosition > 2):
            mode.birdPosition = 0
        if(mode.createBird and len(mode.birds) < 5):
            mode.birds += [Bird(mode.width + 10, 50, random.randrange(3, 5))]
        for bird in  mode.birds:
            if(mode.birdPosition == 0):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))
            elif(mode.birdPosition == 1):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[1]))
            elif(mode.birdPosition == 2):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))

    def drawPlayers(mode, canvas):
        if (mode.playerNum == 1):
            canvas.create_image(mode.playerOneCx, mode.playerOneCy, image = ImageTk.PhotoImage(mode.currPlayerOneModel))
        elif (mode.playerNum == 2):
            canvas.create_image(mode.playerOneCx, mode.playerOneCy, image = ImageTk.PhotoImage(mode.currPlayerOneModel))
            canvas.create_image(mode.playerTwoCx, mode.playerTwoCy, image = ImageTk.PhotoImage(mode.currPlayerTwoModel))

    def drawPlayerIdentifiers(mode, canvas):
        if(mode.playerNum == 1 and not mode.oneIsDead):
            canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
        elif(mode.playerNum == 2):
            if(mode.oneIsDead):
                canvas.create_oval(mode.playerTwoCx - 5, mode.playerTwoCy - 60, mode.playerTwoCx + 5,\
                mode.playerTwoCy - 50, fill = mode.playerTwoColor, outline = 'white', width = 2)
            elif(mode.twoIsDead):
                canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                    mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
            else:
                canvas.create_oval(mode.playerOneCx - 5, mode.playerOneCy - 60, mode.playerOneCx + 5,\
                    mode.playerOneCy - 50, fill = mode.playerOneColor, outline = 'white', width = 2)
                canvas.create_oval(mode.playerTwoCx - 5, mode.playerTwoCy - 60, mode.playerTwoCx + 5,\
                    mode.playerTwoCy - 50, fill = mode.playerTwoColor, outline = 'white', width = 2)

    def drawEnemies(mode, canvas):
        for enemy in Enemy.enemies:
            if(enemy[3]):
                mode.currEnemyModel = mode.enemyWalkingRightAnimation[enemy[2] % 3]
            else:
                mode.currEnemyModel = mode.enemyWalkingLeftAnimation[enemy[2] % 3]
            canvas.create_image(enemy[0], enemy[1], image = ImageTk.PhotoImage(mode.currEnemyModel))

    def drawProjectiles(mode, canvas):
        for bullet in Bullet.bullets:
            canvas.create_oval(bullet[0] - mode.bulletRadius, bullet[1] - mode.bulletRadius,\
                bullet[0] + mode.bulletRadius, bullet[1] + mode.bulletRadius, fill = bullet[2],\
                    outline = 'black')

    def drawScore(mode, canvas):
        canvas.create_text(mode.width//2, 35, text = f'Score: {mode.score}', fill = 'white', font = 'System 20')

    def drawHp(mode, canvas):
        if(mode.oneIsDead == False):
            canvas.create_rectangle(20, 10, 120, 30, fill = None, outline = 'white')
            canvas.create_rectangle(20, 12, 20 + mode.playerOneHp, 28, fill = mode.playerOneColor)
        canvas.create_text(70, 50, text = f'Lives: {mode.playerOneLives}', font = 'System 10', fill = 'white')

        if(mode.playerNum == 2 and mode.twoIsDead == False):
            canvas.create_rectangle(mode.width - 120, 10, mode.width - 20, 30, fill = None, outline = 'white')
            canvas.create_rectangle(mode.width - (mode.playerTwoHp + 20) , 12, mode.width - 20, 28, fill = mode.playerTwoColor)
            canvas.create_text(mode.width - 70, 50, text = f'Lives: {mode.playerTwoLives}', font = 'System 10', fill = 'white')
    
    def drawDeath(mode, canvas):
        if(mode.oneIsDead):
            canvas.create_image(mode.playerOneCx - 50, mode.playerOneCy + 3, image = ImageTk.PhotoImage(mode.halo))
        elif(mode.playerNum == 2 and mode.twoIsDead):
            canvas.create_image(mode.playerTwoCx - 50, mode.playerTwoCy + 3, image = ImageTk.PhotoImage(mode.halo))
    
    def drawWellsAndBenches(mode, canvas):
        for bench in mode.benches:
            canvas.create_image(bench[0] - mode.scrollX, bench[1], image = ImageTk.PhotoImage(mode.bench))

        for well in mode.wells:
            canvas.create_image(well[0] - mode.scrollX, well[1], image = ImageTk.PhotoImage(mode.well))

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        mode.drawBackground(canvas)
        canvas.create_rectangle(0 - mode.scrollX, 475, 5000 - mode.scrollX, mode.height, fill = 'black')
        for wall in Wall.wallList:
            canvas.create_rectangle(wall[0] + wall[2] - mode.scrollX, wall[1] - wall[3],
                wall[0] - wall[2] - mode.scrollX, wall[1] + wall[3], fill = 'black')
        mode.drawWellsAndBenches(canvas)
        canvas.create_image(5000 - 250 - mode.scrollX, mode.height - 70, image = ImageTk.PhotoImage(mode.endPoint))
        mode.drawScore(canvas)
        mode.drawHp(canvas)
        mode.drawBirds(canvas)
        mode.drawPlayers(canvas)
        mode.drawPlayerIdentifiers(canvas)
        mode.drawEnemies(canvas)
        mode.drawProjectiles(canvas)
        if(mode.oneIsDead or (mode.playerNum == 2 and mode.twoIsDead)):
            mode.drawDeath(canvas)

class LevelSelectMode(Mode):
    def appStarted(mode):
        mode.rectWidth = 45
        mode.rectHeight = 40
        mode.cx = mode.width//2
        mode.cy = mode.height//2
        mode.icon = mode.scaleImage(mode.loadImage('FriendIcon.png'), .3)
        mode.outline = 'black'
        mode.levelSelected = False
        mode.selectionError = False
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX >= mode.cx - 30 and clickX <= mode.cx + 30):
            if(clickY >= mode.height - 50 and clickY <= mode.height - 20):
                if(mode.levelSelected):
                    mode.app.setActiveMode(mode.app.gameMode)
                else:
                    mode.selectionError = True
        
        if(clickX >= mode.cx - mode.rectWidth and clickX <= mode.cx + mode.rectWidth):
            if(clickY >= mode.cy - mode.rectHeight and clickY <= mode.cy + mode.rectHeight):
                mode.levelSelected = True
                mode.outline = 'white'
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_rectangle(mode.cx - mode.rectWidth, mode.cy - mode.rectHeight, mode.cx + mode.rectWidth,
            mode.cy + mode.rectHeight, fill = 'grey15', outline = mode.outline)
        canvas.create_text(mode.cx, mode.cy + mode.rectHeight*(3/2), text = 'Rescue Mission', font = 'System 12', fill = 'white')
        canvas.create_rectangle(mode.cx - 30, mode.height - 50, mode.cx + 30, mode.height - 20, fill = 'red2')
        canvas.create_text(mode.cx, mode.height - 35, text = 'Begin', font = 'System 12', fill = 'black')
        canvas.create_text(mode.cx, 100, text = 'Tutorial Complete', font = 'System 16', fill = 'white')
        canvas.create_text(mode.cx, 175, text = 'Level Select:', font = 'System 14', fill = 'white')
        canvas.create_image(mode.cx + 30, mode.cy + 15, image = ImageTk.PhotoImage(mode.icon))
        if(mode.selectionError):
            canvas.create_text(mode.cx, mode.cy + mode.rectHeight*(5/2), text = 'Please Select a Level First', font = 'System 12',
                fill = 'red2')

class TitleScreenMode(Mode):
    scoresViewable = False
    tutorialComplete = False

    def appStarted(mode):
        mode.lockOnePlayer = False
        mode.lockTwoPlayer = False

        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.titleImage = mode.loadImage('LimboTitle.png')
        mode.displayImages = [mode.loadImage('TitleScreen.png'), mode.loadImage('TitleScreen2.png')]
        mode.displayImagesTwo = [mode.loadImage('TitleScreenLeft.png'), mode.loadImage('TitleScreenLeft2.png')]

        mode.sadLock = mode.scaleImage(mode.loadImage('sadLock.png'), .15)
        mode.happyLock = mode.scaleImage(mode.loadImage('happyLock.png'), .15)

        mode.currImage = mode.displayImages[1]
        mode.currImageTwo = mode.displayImagesTwo[1]
        mode.display = mode.scaleImage(mode.currImage, .25)
        mode.displayTwo = mode.scaleImage(mode.currImageTwo, .25)
        mode.buttonOne = mode.scaleImage(mode.loadImage('onePlayer.png'), .4)
        mode.buttonTwo = mode.scaleImage(mode.loadImage('twoPlayer.png'), .4)
        mode.buttonOneRed = mode.scaleImage(mode.loadImage('onePlayerRed.png'), .4)
        mode.buttonTwoRed = mode.scaleImage(mode.loadImage('twoPlayerRed.png'), .4)
        mode.isButtonOneClicked = True
        mode.isButtonTwoClicked = False

        mode.isTwoPlayer = False
        mode.isOnePlayer = True

    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX >= 300 and clickX <= 400):
            if(clickY >= 200 and clickY <= 250):
                if(PlayerDesignModeOne.designChosen):
                    mode.app.setActiveMode(mode.app.cutScreen)
                    return
                if(mode.isOnePlayer):
                    mode.lockOnePlayer = True
                    mode.app.setActiveMode(mode.app.playerDesignModeOne)
                elif(mode.isTwoPlayer):
                    mode.lockTwoPlayer = True
                    mode.app.setActiveMode(mode.app.playerDesignModeTwo)
            elif(clickY >= 275 and clickY <= 325):
                mode.app.setActiveMode(mode.app.helpMode)
            elif(clickY >= 350 and clickY <= 400 and TitleScreenMode.scoresViewable):
                mode.app.setActiveMode(mode.app.highScores)
            elif(clickY >= 425 and clickY <= 475):
                mode.app.setActiveMode(mode.app.wallOfFame)
        if(clickY > mode.cy - 25 and clickY < mode.cy + 25):
            if(clickX > mode.cx - 175 and clickX < mode.cx - 125):
                if(mode.lockTwoPlayer):
                    pass
                else: 
                    mode.isButtonOneClicked = True
                    mode.isOnePlayer = True
                    mode.isTwoPlayer = False
                    mode.isButtonTwoClicked = False
            elif(clickX > mode.cx + 125 and clickX < mode.cx + 175):
                if(mode.lockOnePlayer):
                    pass
                else:
                    mode.isButtonTwoClicked = True
                    mode.isButtonOneClicked = False
                    mode.isTwoPlayer = True
                    mode.isOnePlayer = False

    def timerFired(mode):
        mode.currImage = mode.displayImages[1]
        mode.currImageTwo = mode.displayImagesTwo[1]
        changeScreen = random.randrange(100)
        if(changeScreen > 95):
            mode.currImage = mode.displayImages[0]
            mode.currImageTwo = mode.displayImagesTwo[0]
        mode.display = mode.scaleImage(mode.currImage, .5)
        mode.displayTwo = mode.scaleImage(mode.currImageTwo, .5)
    
    def drawPlayerButtons(mode, canvas):
        if(mode.isButtonOneClicked == False):
            canvas.create_image(mode.cx - 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonOne))
        if(mode.isButtonTwoClicked == False):
            canvas.create_image(mode.cx + 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonTwo))
        if(mode.isButtonOneClicked == True):
            canvas.create_image(mode.cx - 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonOneRed))
        if(mode.isButtonTwoClicked == True):
            canvas.create_image(mode.cx + 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonTwoRed))
    
    def drawPlayersOnScreen(mode, canvas):
        if(mode.isTwoPlayer):
            canvas.create_image(100, 400, image = ImageTk.PhotoImage(mode.display))
            canvas.create_line(100, 447, 200, 447, fill = 'white')
            canvas.create_image(600, 400, image = ImageTk.PhotoImage(mode.displayTwo))
            canvas.create_line(600, 447, 500, 447, fill = 'white')
        else:
            canvas.create_image(100, 400, image = ImageTk.PhotoImage(mode.display))
            canvas.create_line(100, 447, 200, 447, fill = 'white')
    
    def drawLock(mode, canvas):
        if(TitleScreenMode.scoresViewable):
            canvas.create_image(280, 375, image = ImageTk.PhotoImage(mode.happyLock))
        else:
            canvas.create_image(280, 375, image = ImageTk.PhotoImage(mode.sadLock))
    
    def playerLocked(mode, canvas):
        if(mode.lockOnePlayer):
            canvas.create_text(mode.cx - 160, mode.cy + 30, text = 'One Player has been chosen', font = 'System 10', fill = 'red')
        elif(mode.lockTwoPlayer):
            canvas.create_text(mode.cx + 160, mode.cy + 30, text = 'Two Player has been chosen', font = 'System 10', fill = 'red')

    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = "black")
        mode.drawPlayerButtons(canvas)
        mode.drawPlayersOnScreen(canvas)
        mode.drawLock(canvas)
        mode.playerLocked(canvas)
        canvas.create_image(mode.cx, mode.cy - mode.cy//2, image = ImageTk.PhotoImage(mode.titleImage))
        canvas.create_text(mode.cx, mode.cy - mode.cy//3 - 10, text = '8-bit Version', fill = 'white',\
            font = 'System 2')
        canvas.create_polygon(300, 200, 300, 250, 400, 250, 400, 200, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 275, 300, 325, 400, 325, 400, 275, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 350, 300, 400, 400, 400, 400, 350, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 425, 300, 475, 400, 475, 400, 425, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_text(350, 225, text = 'Start Game', font = 'System 12', fill = 'black')
        canvas.create_text(350, 300, text = 'How To Play', font = 'System 12', fill = 'black')
        canvas.create_text(350, 375, text = 'High Scores', font = 'System 12', fill = 'black')
        canvas.create_text(350, 450, text = 'Wall Of Fame', font = 'System 12', fill = 'black')

class PlayerDesignModeOne(Mode):
    designChosen = False

    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.color1 = None
        mode.outlineBlue = 'black'
        mode.outlineMagenta = 'black'
        mode.outlineGreen = 'black'
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx - 75 and clickX < mode.cx + 75):
            if(clickY > mode.height - 100 and clickY < mode.height - 50):
                PlayerDesignModeOne.designChosen = True
                player1 = Player(50, mode.height - 50, mode.color1)
                mode.color1 = None
                mode.app.setActiveMode(mode.app.cutScreen)
        if(clickX > 35 and clickX < 115):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
        #blue circle
        if(clickX > mode.cx - mode.cx//2 + 110 and clickX < mode.cx - mode.cx//2 + 130):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'blue'
                mode.outlineBlue = 'white'
                mode.outlineMagenta = 'black'
                mode.outlineGreen = 'black'
        
        #green circle
        if(clickX > mode.cx - mode.cx//2 + 150 and clickX < mode.cx - mode.cx//2 + 170):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'green2'
                mode.outlineGreen = 'white'
                mode.outlineBlue = 'black'
                mode.outlineMagenta = 'black'
        
        #magenta circle
        if(clickX > mode.cx - mode.cx//2 + 190 and clickX < mode.cx - mode.cx//2 + 210):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'magenta'
                mode.outlineMagenta = 'white'
                mode.outlineBlue = 'black'
                mode.outlineGreen = 'black'

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx - mode.cx//2, mode.cy - mode.cy//2 + 50, text = 'Choose Player Color:',\
            fill = 'white', font = '20')
        canvas.create_oval(mode.cx - mode.cx//2 + 110, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 130,\
            mode.cy - mode.cy//2 + 60, fill = 'blue', outline = mode.outlineBlue, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 150, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 170,\
            mode.cy - mode.cy//2 + 60, fill = 'green2', outline = mode.outlineGreen, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 190, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 210,\
            mode.cy - mode.cy//2 + 60, fill = 'magenta', outline = mode.outlineMagenta, width = 4)
        canvas.create_rectangle(mode.cx - 75, mode.height - 100, mode.cx + 75,\
            mode.height - 50, fill = 'dark grey', outline = 'white')
        canvas.create_text(mode.cx, mode.height - 75, text = 'Begin', fill = 'black', font = 'System 24 italic')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')

class PlayerDesignModeTwo(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.color1 = None
        mode.color2 = None
        mode.outlineBlue = 'black'
        mode.outlineMagenta = 'black'
        mode.outlineGreen = 'black'

        mode.outlineBlueTwo = 'black'
        mode.outlineMagentaTwo = 'black'
        mode.outlineGreenTwo = 'black'
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx - 75 and clickX < mode.cx + 75):
            if(clickY > mode.height - 100 and clickY < mode.height - 50):
                PlayerDesignModeOne.designChosen = True
                player1 = Player(50, mode.height - 30, mode.color1)
                player2 = Player(30, mode.height - 30, mode.color2)
                mode.app.setActiveMode(mode.app.cutScreen)
        if(clickX > 35 and clickX < 115):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
        #blue circle
        if(clickX > mode.cx - mode.cx//2 + 110 and clickX < mode.cx - mode.cx//2 + 130):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'blue'
                mode.outlineBlue = 'white'
                mode.outlineMagenta = 'black'
                mode.outlineGreen = 'black'
        
        #green circle
        if(clickX > mode.cx - mode.cx//2 + 150 and clickX < mode.cx - mode.cx//2 + 170):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'green2'
                mode.outlineGreen = 'white'
                mode.outlineBlue = 'black'
                mode.outlineMagenta = 'black'
        
        #magenta circle
        if(clickX > mode.cx - mode.cx//2 + 190 and clickX < mode.cx - mode.cx//2 + 210):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'magenta'
                mode.outlineMagenta = 'white'
                mode.outlineBlue = 'black'
                mode.outlineGreen = 'black'
        
        #blue circle two
        if(clickX > mode.cx - mode.cx//2 + 110 and clickX < mode.cx - mode.cx//2 + 130):
            if(clickY > mode.cy + 40 and clickY < mode.cy + 60):
                mode.color2 = 'blue'
                mode.outlineBlueTwo = 'white'
                mode.outlineMagentaTwo = 'black'
                mode.outlineGreenTwo = 'black'
        
        #green circle two
        if(clickX > mode.cx - mode.cx//2 + 150 and clickX < mode.cx - mode.cx//2 + 170):
            if(clickY > mode.cy + 40 and clickY < mode.cy + 60):
                mode.color2 = 'green2'
                mode.outlineGreenTwo = 'white'
                mode.outlineBlueTwo = 'black'
                mode.outlineMagentaTwo = 'black'
        
        #magenta circle two
        if(clickX > mode.cx - mode.cx//2 + 190 and clickX < mode.cx - mode.cx//2 + 210):
            if(clickY > mode.cy + 40 and clickY < mode.cy + 60):
                mode.color2 = 'magenta'
                mode.outlineMagentaTwo = 'white'
                mode.outlineBlueTwo = 'black'
                mode.outlineGreenTwo = 'black'

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')

        #Player 1
        canvas.create_text(mode.cx - mode.cx//2, mode.cy - mode.cy//2 + 50, text = 'Choose Player Color:',\
            fill = 'white', font = '20')
        canvas.create_oval(mode.cx - mode.cx//2 + 110, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 130,\
            mode.cy - mode.cy//2 + 60, fill = 'blue', outline = mode.outlineBlue, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 150, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 170,\
            mode.cy - mode.cy//2 + 60, fill = 'green2', outline = mode.outlineGreen, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 190, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 210,\
            mode.cy - mode.cy//2 + 60, fill = 'magenta', outline = mode.outlineMagenta, width = 4)

        #Player Two
        canvas.create_text(mode.cx - mode.cx//2, mode.cy + 50, text = 'Choose Player Color:',\
            fill = 'white', font = '20')
        canvas.create_oval(mode.cx - mode.cx//2 + 110, mode.cy + 40, mode.cx - mode.cx//2 + 130,\
            mode.cy + 60, fill = 'blue', outline = mode.outlineBlueTwo, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 150, mode.cy + 40, mode.cx - mode.cx//2 + 170,\
            mode.cy + 60, fill = 'green2', outline = mode.outlineGreenTwo, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 190, mode.cy + 40, mode.cx - mode.cx//2 + 210,\
            mode.cy + 60, fill = 'magenta', outline = mode.outlineMagentaTwo, width = 4)


        canvas.create_rectangle(mode.cx - 75, mode.height - 100, mode.cx + 75,\
            mode.height - 50, fill = 'dark grey', outline = 'white')
        canvas.create_text(mode.cx, mode.height - 75, text = 'Begin', fill = 'black', font = 'System 24 italic')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')

class WallOfFameMode(Mode):
    def appStarted(mode):
        mode.imageOne = mode.scaleImage(mode.loadImage('FractalHw.png'), .2)
        mode.imageTwo = mode.scaleImage(mode.loadImage('RobotHw.png'), .2)
        mode.imageThree = mode.scaleImage(mode.loadImage('CityHw.png'), .2)
        mode.imageFour = mode.scaleImage(mode.loadImage('PatternsHw.png'), .2)

    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 35 and clickX < 115):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
        
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_rectangle(0, mode.height//2 - 100, mode.width, mode.height//2 + 100,\
            fill = 'dark grey')
        canvas.create_image(mode.width//2 - 250, mode.height//2, image = ImageTk.PhotoImage(mode.imageOne))
        canvas.create_image(mode.width//2 - 100, mode.height//2, image = ImageTk.PhotoImage(mode.imageTwo))
        canvas.create_image(mode.width//2 + 100, mode.height//2, image = ImageTk.PhotoImage(mode.imageThree))
        canvas.create_image(mode.width//2 + 250, mode.height//2, image = ImageTk.PhotoImage(mode.imageFour))
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')
        canvas.create_text(mode.width//2, 50, text = "Time Spent on 112 Homework: ∞", font = 'System 20', fill = 'white')
        canvas.create_text(mode.width//2, mode.height - 100, text = "Favorite Quote: \"It\'s okay to fail\"", font = 'System 14', fill = 'white')
        canvas.create_text(mode.width//2 + 15, mode.height - 75, text = "-Professor Mike Taylor", font = 'System 10', fill = 'white')

#This code makes use of JSON which is a way of storing data in a file
#or in this case on a website (source) to be accessible for future references.
#The use of json was mde possible by lessons from:

#https://www.w3schools.com/python/python_json.asp

#While no code was take directly, I only found it fair to cite the source of
#knowledge since it was not covered in 15-112.

class HighScoresMode(Mode):
    def appStarted(mode):
        url = 'https://api.myjson.com/bins/qmn4y'
        source = requests.get(url)
        data = json.loads(source.text)
        if(Team.teamNames in data and Score.score > data.get(Team.teamNames)):
            data.update({Team.teamNames : Score.score})
        elif(Team.teamNames not in data):
            data.update({Team.teamNames : Score.score})
        headers = {'Content-Type':'application/json'}
        requests.put(url, data = json.dumps(data), headers = headers)

        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.topScore = 0
        mode.topPlayer = ''

        mode.secondScore = 3
        mode.secondPlayer = ''

        mode.thirdScore = 1
        mode.thirdPlayer = ''

        items = data.items()
        for item in items:
            if item[1] > mode.topScore:
                mode.secondPlayer = mode.topPlayer
                mode.secondScore = mode.topScore
                mode.topPlayer = item[0]
                mode.topScore = item[1]
            if item[1] < mode.topScore and item[1] > mode.secondScore:
                mode.thirdPlayer = mode.secondPlayer
                mode.thirdScore = mode.secondScore
                mode.secondPlayer = item[0]
                mode.secondScore = item[1]
            if item[1] < mode.secondScore and item[1] > mode.thirdScore:
                mode.thirdPlayer = item[0]
                mode.thirdScore = item[1]
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 35 and clickX < 115):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'High Scores', fill = "white",\
            font = 'System 30 bold')
        canvas.create_text(mode.cx - mode.cx//2, 150, text = '1.', fill = "white",\
            font = 'System 25 bold')
        canvas.create_text(mode.cx, 150, text = mode.topPlayer, fill = 'white', font = 'System 30')
        canvas.create_text(mode.cx + mode.cx//2, 150, text = mode.topScore, fill = 'white', font = 'System 30')


        canvas.create_text(mode.cx - mode.cx//2, 225, text = '2.', fill = "white",\
            font = 'System 25 bold')
        canvas.create_text(mode.cx, 225, text = mode.secondPlayer, fill = 'white', font = 'System 30')
        canvas.create_text(mode.cx + mode.cx//2, 225, text = mode.secondScore, fill = 'white', font = 'System 30')

        canvas.create_text(mode.cx - mode.cx//2, 300, text = '3.', fill = "white",\
            font = 'System 25 bold')
        canvas.create_text(mode.cx, 300, text = mode.thirdPlayer, fill = 'white', font = 'System 30')
        canvas.create_text(mode.cx + mode.cx//2, 300, text = mode.thirdScore, fill = 'white', font = 'System 30')

        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')

class GameOverMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx-50 and clickX < mode.cx+50):
            if(clickY > mode.cy-25 and clickY < mode.cy+25):
                mode.app.setActiveMode(mode.app.highScores)

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2, text = "Game Over",\
            font = 'System 30 bold', fill ='red')
        canvas.create_rectangle(mode.cx - 50, mode.cy - 25, mode.cx + 50, mode.cy + 25, fill = 'red',\
            outline = 'white')
        canvas.create_text(mode.cx, mode.cy, text = 'View Scores', fill = 'white',\
            font = 'System 10')

class CutScreenMode(Mode):
    def appStarted(mode):
        mode.counter = 0
        mode.cutScreenImages = [mode.loadImage('cut1.png'), mode.loadImage('cut2.png'),
            mode.loadImage('cut13.png'),mode.loadImage('cut4.png'),mode.loadImage('cut5.png'),
            mode.loadImage('cut6.png'),mode.loadImage('cut7.png'),mode.loadImage('cut8.png'),
            mode.loadImage('cut9.png'),mode.loadImage('cut10.png'),mode.loadImage('cut11.png'),
            mode.loadImage('cut12.png'),mode.loadImage('cut13.png'),mode.loadImage('cut14.png'),
            mode.loadImage('cut15.png'),mode.loadImage('cut16.png'),mode.loadImage('cut17.png'),
            mode.loadImage('cut18.png'),mode.loadImage('cut19.png'),mode.loadImage('cut20.png'),
            mode.loadImage('cut21.png'),mode.loadImage('cut22.png'),mode.loadImage('cut23.png'),
            mode.loadImage('cut24.png'),mode.loadImage('cut25.png'),mode.loadImage('cut26.png'),
            mode.loadImage('cut27.png'),mode.loadImage('cut28.png'),mode.loadImage('cut29.png'),
            mode.loadImage('cut30.png'),mode.loadImage('cut31.png'),mode.loadImage('cut32.png'),
            mode.loadImage('cut33.png'),mode.loadImage('cut34.png'),mode.loadImage('cut35.png'),
            mode.loadImage('cut36.png'),mode.loadImage('cut37.png'),mode.loadImage('cut38.png')]
        mode.currImage = mode.cutScreenImages[0]

    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX < mode.width//2 + 50 and clickX > mode.width//2 - 50):
            if(clickY < mode.height//2 + 200 and clickY > mode.height//2 + 150):
                if(TitleScreenMode.tutorialComplete):
                    mode.app.setActiveMode(mode.app.levelSelect)
                else:
                    mode.app.setActiveMode(mode.app.tutorialMode)

    def timerFired(mode):
        mode.counter += .25
        if(mode.counter < 37):
            mode.currImage = mode.cutScreenImages[int(mode.counter//1)]
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        if(mode.counter >= 38):
            canvas.create_image(mode.width//2, mode.height//2, image = ImageTk.PhotoImage(mode.cutScreenImages[37]))
            canvas.create_rectangle(mode.width//2 - 50, mode.height//2 + 150, mode.width//2 + 50, mode.height//2 + 200,
                fill = 'red', outline = 'black')
            canvas.create_text(mode.width//2, mode.height//2+175, text = 'Begin', font = 'System 15', fill = 'white')
        else:
            canvas.create_image(mode.width//2, mode.height//2, image = ImageTk.PhotoImage(mode.currImage))


class InstructionsMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.upKey = mode.scaleImage(mode.loadImage('UpKey.png'), .5)
        mode.rightKey = mode.scaleImage(mode.loadImage('RightKey.png'), .5)
        mode.leftKey = mode.scaleImage(mode.loadImage('LeftKey.png'), .5)
        mode.spaceBar = mode.scaleImage(mode.loadImage('SpaceBar.png'), .5)
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'Instructions:', fill = "white",\
            font = 'System 30 bold')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')
        canvas.create_image(mode.cx - mode.cx//2 + 50, 150, image = ImageTk.PhotoImage(mode.upKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 225, image = ImageTk.PhotoImage(mode.rightKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 300, image = ImageTk.PhotoImage(mode.leftKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 375, image = ImageTk.PhotoImage(mode.spaceBar))
        canvas.create_text(mode.cx, 150, text = 'Press Up/w to jump',\
            font = 'System 12', fill = 'white')
        canvas.create_text(mode.cx + 40, 225, text = 'Press Right/d to move the player right',\
            font = 'System 12', fill = 'white')
        canvas.create_text(mode.cx + 35, 300, text = 'Press Left/a to move the player right',\
            font = 'System 12', fill = 'white')
        canvas.create_text(mode.cx + 65, 375, text = 'Press Space/Tab to shoot enemies',\
            font = 'System 12', fill = 'white')

class PauseMenuMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
    
    def keyPressed(mode, event):
        if(event.key == 'p'):
            if(GameMode.isPaused):
                GameMode.isPaused = False
                mode.app.setActiveMode(mode.app.gameMode)
            else:
                mode.app.setActiveMode(mode.app.tutorialMode)
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx - mode.cx // 4 and clickX < mode.cx + mode.cx // 4):
            if(clickY > mode.cy - 15 and clickY < mode.cy + 15):
                if(GameMode.isPaused):
                    GameMode.isPaused = False
                    mode.app.setActiveMode(mode.app.gameMode)
                else:
                    mode.app.setActiveMode(mode.app.tutorialMode)
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'PAUSED', fill = "black",\
            font = 'System 30 bold')
        canvas.create_rectangle(mode.cx - mode.cx//4, mode.cy - 15, mode.cx + mode.cx//4,\
            mode.cy + 15, fill = 'red', outline = 'black')
        canvas.create_text(mode.cx, mode.cy, text = 'Resume', fill = 'black', font = 'System 20 italic')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'System 10 bold')


class WinMode(Mode):
    def appStarted(mode):
        mode.rectWidth = 25
        mode.rectHeight = 15
        mode.credits = f'''\t\t\t\t\t   Credits: \n
                            Game Code: Remington Frank \t\t\t Music: Remington Frank \n
                            Illustration: Remington Frank \t\t\t Player: {Team.teamNames}
                        '''
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.highScores)

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        canvas.create_text(mode.width//2, mode.height//2 - mode.height//4, text = 'Congrats', font = 'System 30', fill = 'white')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'View Scores', fill = 'black',\
            font = 'System 10 bold')
        
        canvas.create_text(mode.width//2 - mode.width//8, mode.height//2 + mode.height//6, text = mode.credits, font = 'System 14', fill = 'white')

class MyModalApp(ModalApp):
    pygame.init()
    pygame.mixer.music.load("LimboGameMusic.wav")
    pygame.mixer.music.play(-1)
    pygame.mixer.music.set_volume(.1)
    def appStarted(app):
        app.titleScreenMode = TitleScreenMode()
        app.overMode = GameOverMode()
        app.gameMode = GameMode()
        app.tutorialMode = TutorialMode()
        app.helpMode = InstructionsMode()
        app.playerDesignModeOne = PlayerDesignModeOne()
        app.playerDesignModeTwo = PlayerDesignModeTwo()
        app.winningMode = WinMode()
        app.pauseMode = PauseMenuMode()
        app.cutScreen = CutScreenMode()
        app.highScores = HighScoresMode()
        app.wallOfFame = WallOfFameMode()
        app.levelSelect = LevelSelectMode()
        app.setActiveMode(app.titleScreenMode)
        app.timerDelay = 25

LoginInfo()

if(LoginInfo.proceed):
    app = MyModalApp(width=700, height=500)
pygame.mixer.music.stop()



