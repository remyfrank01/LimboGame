from cmu_112_graphics import *
from tkinter import *
import random

class Player(object):
    def __init__(self, cx, cy, color):
        self.cx = cx
        self.cy = cy
        self.cyChangeRate = 10
        self.speed = 5
        self.lives = 3
        self.players += [(cx, cy, color)]

class Enemy(object):
    def __init__(self, cx, cy):
        self.cx = cx
        self.cy = cy
        self.speed = 8
        self.hp = 25


class Wall(object):
    def __init__(self, cx, cy, width, height):
        self.cx = cx
        self.cy = cy
        self.width = width
        self.height = height

class Bird(object):
    def __init__(self, cx, cy, changeX):
        self.cx = cx
        self.cy = random.randrange(50, 200)
        self.changeX = changeX

class GameMode(Mode):
    def appStarted(mode):
        mode.gameWon = False
        mode.isGameOver = False
        mode.isPaused = False
        mode.scrollY = 0
        mode.scrollX = 0
        mode.points = 0
        mode.walls = []
        mode.walkCount = 0
        mode.rightKeyIsPressed = False
        mode.stationaryAnimation = [mode.loadImage('Stationary.png'), mode.loadImage('walk1.png')]
        mode.walkingRightAnimation = [mode.loadImage('walk2.png'), mode.loadImage('walk3.png'),\
                mode.loadImage('walk4.png'), mode.loadImage('walk5.png'), mode.loadImage('walk6.png'), \
                mode.loadImage('walk7.png'), mode.loadImage('walk8.png')]
        mode.currPlayerModel = mode.stationaryAnimation[0]
        mode.createBird = False
        mode.birdFlying = [mode.scaleImage(mode.loadImage('BirdUp.png'), .3), \
            mode.scaleImage(mode.loadImage('BirdNull.png'), .3),\
            mode.scaleImage(mode.loadImage('BirdDown.png'), .3)]
        mode.birds = []
        mode.birdPosition = 0
    
    def keyPressed(mode, event):
        if(event.key == "Space"):
            player.cy -= 10
            player.cyChangeRate = -15
        elif(event.key == "Right"):
            player.cx += 10
            mode.rightKeyIsPressed = True
            mode.currPlayerModel = mode.stationaryAnimation[1]
        elif(event.key == "p"):
            mode.isPaused = True
            mode.app.setActiveMode(mode.app.pauseMode)
    
    def keyReleased(mode, event):
        if(event.key == "Right"):
            mode.rightKeyIsPressed = False
            mode.currPlayerModel = mode.stationaryAnimation[0]
            

    def mousePressed(mode, event):
        pass
    
    def timerFired(mode):
        if(mode.isPaused):
            mode.isPaused = False
            return
        mode.createBird = False
        newBird = random.randrange(100)
        for bird in mode.birds:
            bird.cx -= bird.changeX
            if(bird.cx <= -25):
                mode.birds.remove(bird)
        if(newBird >= 99):
            mode.createBird = True
        if(mode.rightKeyIsPressed):
            mode.walkCount += 1
            mode.currPlayerModel = mode.walkingRightAnimation[mode.walkCount//7]
        if(mode.gameWon):
            mode.gameWon = False
            mode.points = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.winningMode)
            return
        if(mode.isGameOver):
            mode.isGameOver = False
            mode.points = 0
            mode.cx = mode.width//2
            mode.cy = mode.height//2
            mode.app.setActiveMode(mode.app.overMode)
            return
        #player.cy += 2
        mode.birdPosition += 1
    
    def drawWorld(mode, canvas):
        pass

    def drawBackgound(mode, canvas):
        pass

    def drawBirds(mode, canvas):
        if(mode.birdPosition > 2):
            mode.birdPosition = 0
        if(mode.createBird and len(mode.birds) < 5):
            mode.birds += [Bird(mode.width + 10, 50, random.randrange(3, 5))]
        for bird in  mode.birds:
            if(mode.birdPosition == 0):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))
            elif(mode.birdPosition == 1):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[1]))
            elif(mode.birdPosition == 2):
                 canvas.create_image(bird.cx, bird.cy, image = ImageTk.PhotoImage(mode.birdFlying[0]))


    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        canvas.create_rectangle(0, 475, mode.width, mode.height, fill = 'black')
        mode.drawBirds(canvas)

class TitleScreenMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.titleImage = mode.loadImage('LimboTitle.png')
        mode.displayImages = [mode.loadImage('TitleScreen.png'), mode.loadImage('TitleScreen2.png')]
        mode.displayImagesTwo = [mode.loadImage('TitleScreenLeft.png'), mode.loadImage('TitleScreenLeft2.png')]
        mode.currImage = mode.displayImages[1]
        mode.currImageTwo = mode.displayImagesTwo[1]
        mode.display = mode.scaleImage(mode.currImage, .25)
        mode.displayTwo = mode.scaleImage(mode.currImageTwo, .25)
        mode.buttonOne = mode.scaleImage(mode.loadImage('onePlayer.png'), .4)
        mode.buttonTwo = mode.scaleImage(mode.loadImage('twoPlayer.png'), .4)
        mode.buttonOneRed = mode.scaleImage(mode.loadImage('onePlayerRed.png'), .4)
        mode.buttonTwoRed = mode.scaleImage(mode.loadImage('twoPlayerRed.png'), .4)
        mode.isButtonOneClicked = True
        mode.isButtonTwoClicked = False
        mode.isTwoPlayer = False
        mode.isOnePlayer = True
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX >= 300 and clickX <= 400):
            if(clickY >= 200 and clickY <= 250):
                mode.app.setActiveMode(mode.app.playerDesignMode)
            elif(clickY >= 275 and clickY <= 325):
                mode.app.setActiveMode(mode.app.helpMode)
            elif(clickY >= 350 and clickY <= 400):
                mode.app.setActiveMode(mode.app.highScores)
            elif(clickY >= 425 and clickY <= 475):
                mode.app.setActiveMode(mode.app.wallOfFame)
        if(clickY > mode.cy - 25 and clickY < mode.cy + 25):
            if(clickX > mode.cx - 175 and clickX < mode.cx - 125):
                mode.isButtonOneClicked = True
                mode.isOnePlayer = True
                mode.isTwoPlayer = False
                mode.isButtonTwoClicked = False
            elif(clickX > mode.cx + 125 and clickX < mode.cx + 175):
                mode.isButtonTwoClicked = True
                mode.isButtonOneClicked = False
                mode.isTwoPlayer = True
                mode.isOnePlayer = False

    def timerFired(mode):
        mode.currImage = mode.displayImages[1]
        mode.currImageTwo = mode.displayImagesTwo[1]
        changeScreen = random.randrange(100)
        if(changeScreen > 95):
            mode.currImage = mode.displayImages[0]
            mode.currImageTwo = mode.displayImagesTwo[0]
        mode.display = mode.scaleImage(mode.currImage, .5)
        mode.displayTwo = mode.scaleImage(mode.currImageTwo, .5)
    
    def drawPlayerButtons(mode, canvas):
        if(mode.isButtonOneClicked == False):
            canvas.create_image(mode.cx - 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonOne))
        if(mode.isButtonTwoClicked == False):
            canvas.create_image(mode.cx + 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonTwo))
        if(mode.isButtonOneClicked == True):
            canvas.create_image(mode.cx - 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonOneRed))
        if(mode.isButtonTwoClicked == True):
            canvas.create_image(mode.cx + 150, mode.cy, image = ImageTk.PhotoImage(mode.buttonTwoRed))
    
    def drawPlayersOnScreen(mode, canvas):
        if(mode.isTwoPlayer):
            canvas.create_image(100, 400, image = ImageTk.PhotoImage(mode.display))
            canvas.create_line(100, 447, 200, 447, fill = 'white')
            canvas.create_image(600, 400, image = ImageTk.PhotoImage(mode.displayTwo))
            canvas.create_line(600, 447, 500, 447, fill = 'white')
        else:
            canvas.create_image(100, 400, image = ImageTk.PhotoImage(mode.display))
            canvas.create_line(100, 447, 200, 447, fill = 'white')

    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = "black")
        mode.drawPlayerButtons(canvas)
        mode.drawPlayersOnScreen(canvas)
        canvas.create_image(mode.cx, mode.cy - mode.cy//2, image = ImageTk.PhotoImage(mode.titleImage))
        canvas.create_polygon(300, 200, 300, 250, 400, 250, 400, 200, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 275, 300, 325, 400, 325, 400, 275, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 350, 300, 400, 400, 400, 400, 350, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_polygon(300, 425, 300, 475, 400, 475, 400, 425, fill = "grey", outline = 'black', smooth = 1)
        canvas.create_text(350, 225, text = 'Start Game', font = 'Helvetica 12', fill = 'black')
        canvas.create_text(350, 300, text = 'How To Play', font = 'Helvetica 12', fill = 'black')
        canvas.create_text(350, 375, text = 'High Scores', font = 'Helvetica 12', fill = 'black')
        canvas.create_text(350, 450, text = 'Wall Of Fame', font = 'Helvetica 12', fill = 'black')

class PlayerDesignMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.color1 = None
        mode.color2 = None
        mode.outlineBlue = 'black'
        mode.outlineMagenta = 'black'
        mode.outlineGreen = 'black'
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx - 75 and clickX < mode.cx + 75):
            if(clickY > mode.height - 100 and clickY < mode.height - 50):
                mode.app.setActiveMode(mode.app.gameMode)
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
        #blue circle
        if(clickX > mode.cx - mode.cx//2 + 110 and clickX < mode.cx - mode.cx//2 + 130):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'blue'
                mode.outlineBlue = 'white'
                mode.outlineMagenta = 'grey'
                mode.outlineGreen = 'grey'
        
        #green circle
        if(clickX > mode.cx - mode.cx//2 + 150 and clickX < mode.cx - mode.cx//2 + 170):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'green'
                mode.outlineGreen = 'white'
                mode.outlineBlue = 'grey'
                mode.outlineMagenta = 'grey'
        
        #magenta circle
        if(clickX > mode.cx - mode.cx//2 + 190 and clickX < mode.cx - mode.cx//2 + 210):
            if(clickY > mode.cy - mode.cy//2 + 40 and clickY < mode.cy - mode.cy//2 + 60):
                mode.color1 = 'magenta'
                mode.outlineMagenta = 'white'
                mode.outlineBlue = 'grey'
                mode.outlineGreen = 'grey'

    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx - mode.cx//2, mode.cy - mode.cy//2, text = 'Enter Player Name:',\
            fill = 'white', font = '20')
        canvas.create_rectangle(mode.cx - mode.cx//2 + 100, mode.cy - mode.cy//2 - 10,\
            mode.cx - mode.cx//2 + 250, mode.cy - mode.cy//2 + 10, fill = 'grey', outline = 'white')
        canvas.create_text(mode.cx - mode.cx//2, mode.cy - mode.cy//2 + 50, text = 'Choose Player Color:',\
            fill = 'white', font = '20')
        canvas.create_oval(mode.cx - mode.cx//2 + 110, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 130,\
            mode.cy - mode.cy//2 + 60, fill = 'blue', outline = mode.outlineBlue, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 150, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 170,\
            mode.cy - mode.cy//2 + 60, fill = 'green2', outline = mode.outlineGreen, width = 4)
        canvas.create_oval(mode.cx - mode.cx//2 + 190, mode.cy - mode.cy//2 + 40, mode.cx - mode.cx//2 + 210,\
            mode.cy - mode.cy//2 + 60, fill = 'magenta', outline = mode.outlineMagenta, width = 4)
        canvas.create_rectangle(mode.cx - 75, mode.height - 100, mode.cx + 75,\
            mode.height - 50, fill = 'dark grey', outline = 'white')
        canvas.create_text(mode.cx, mode.height - 75, text = 'Begin', fill = 'black', font = 'Helvetica 24 italic')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'Helvetica 10 bold')


'''
class WallOfFameMode(Mode):
    def appStarted(mode):
    def mousePressed(mode):
    
    def keyPressed(mode):
    
    def timerFired(mode):
    
    def drawPlayer(mode):
    
    def redrawAll(mode):
'''

class HighScoresMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 35 and clickX < 115):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'High Scores', fill = "white",\
            font = 'Helvetica 30 bold')
        canvas.create_text(mode.cx - mode.cx//2, 150, text = '1.', fill = "white",\
            font = 'Helvetica 25 bold')
        canvas.create_text(mode.cx - mode.cx//2, 225, text = '2.', fill = "white",\
            font = 'Helvetica 25 bold')
        canvas.create_text(mode.cx - mode.cx//2, 300, text = '3.', fill = "white",\
            font = 'Helvetica 25 bold')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'Helvetica 10 bold')

class GameOverMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)

    def redrawAll(mode, canvas):
        canvas.create_text(mode.cx - mode.cx//2, mode.cy - mode.cy//2, text = "Game Over",\
            font = 'Helvetica 30 bold', fill ='red')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'Helvetica 10 bold')
'''
class CutScreen(Mode):
    def appStarted(mode):

    def keyPressed(mode):
    
    def timerFired(mode):
    
    def redrawAll(mode):
'''
class InstructionsMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
        mode.upKey = mode.scaleImage(mode.loadImage('UpKey.png'), .5)
        mode.rightKey = mode.scaleImage(mode.loadImage('RightKey.png'), .5)
        mode.leftKey = mode.scaleImage(mode.loadImage('LeftKey.png'), .5)
        mode.spaceBar = mode.scaleImage(mode.loadImage('SpaceBar.png'), .5)
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > 50 and clickX < 100):
            if(clickY > mode.height-50 and clickY < mode.height-25):
                mode.app.setActiveMode(mode.app.titleScreenMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'black')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'Instructions:', fill = "white",\
            font = 'Helvetica 30 bold')
        canvas.create_rectangle(35, mode.height-50, 115, mode.height-25, fill = 'red',\
            outline = 'white')
        canvas.create_text(75, mode.height - 37.5, text = 'Main Menu', fill = 'black',\
            font = 'Helvetica 10 bold')
        canvas.create_image(mode.cx - mode.cx//2 + 50, 150, image = ImageTk.PhotoImage(mode.upKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 225, image = ImageTk.PhotoImage(mode.rightKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 300, image = ImageTk.PhotoImage(mode.leftKey))
        canvas.create_image(mode.cx - mode.cx//2 + 50, 375, image = ImageTk.PhotoImage(mode.spaceBar))
        canvas.create_text(mode.cx, 150, text = 'Press Up to jump',\
            font = 'Helvetica 12', fill = 'white')
        canvas.create_text(mode.cx + 25, 225, text = 'Press Right to move the player right',\
            font = 'Helvetica 12', fill = 'white')
        canvas.create_text(mode.cx + 25, 300, text = 'Press Left to move the player right',\
            font = 'Helvetica 12', fill = 'white')
        canvas.create_text(mode.cx + 50, 375, text = 'Press Space to shoot enemies',\
            font = 'Helvetica 12', fill = 'white')

class PauseMenuMode(Mode):
    def appStarted(mode):
        mode.cx, mode.cy = mode.width//2, mode.height//2
    
    def keyPressed(mode, event):
        if(event.key == 'p'):
            mode.app.setActiveMode(mode.app.gameMode)
    
    def mousePressed(mode, event):
        clickX, clickY = event.x, event.y
        if(clickX > mode.cx - mode.cx // 4 and clickX < mode.cx + mode.cx // 4):
            if(clickY > mode.cy - 15 and clickY < mode.cy + 15):
                mode.app.setActiveMode(mode.app.gameMode)
    
    def redrawAll(mode, canvas):
        canvas.create_rectangle(0, 0, mode.width, mode.height, fill = 'grey15')
        canvas.create_text(mode.cx, mode.cy - mode.cy//2 - 75, text = 'PAUSED', fill = "black",\
            font = 'Helvetica 30 bold')
        canvas.create_rectangle(mode.cx - mode.cx//4, mode.cy - 15, mode.cx + mode.cx//4,\
            mode.cy + 15, fill = 'red', outline = 'black')
        canvas.create_text(mode.cx, mode.cy, text = 'Resume', fill = 'black', font = 'Helvetica 20 italic')


'''
class WinMode(Mode):
    def appStarted(mode):
'''
class MyModalApp(ModalApp):
    def appStarted(app):
        app.titleScreenMode = TitleScreenMode()
        app.overMode = GameOverMode()
        app.gameMode = GameMode()
        app.helpMode = InstructionsMode()
        app.playerDesignMode = PlayerDesignMode()
        #app.winningMode = WinMode()
        app.pauseMode = PauseMenuMode()
        #app.cutSCreen = CutScreenMode()
        app.highScores = HighScoresMode()
        #app.wallOfFame = WallOfFameMode()
        app.setActiveMode(app.titleScreenMode)
        app.timerDelay = 40

app = MyModalApp(width=700, height=500)
